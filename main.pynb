{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install catboost"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "61wql2uihhYW",
        "outputId": "3842bc6e-291d-4b8b-a280-7e2f4b0b66a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting catboost\n",
            "  Downloading catboost-1.2.5-cp310-cp310-manylinux2014_x86_64.whl (98.2 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.2/98.2 MB\u001b[0m \u001b[31m5.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.3)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.7.1)\n",
            "Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.25.2)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (2.0.3)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.11.4)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.15.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.53.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (24.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.1.2)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (8.4.2)\n",
            "Installing collected packages: catboost\n",
            "Successfully installed catboost-1.2.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install keras-tuner"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BuGQj0cQcGBS",
        "outputId": "ebd52b42-fa01-4d65-aed2-8c78bcfc3c06"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting keras-tuner\n",
            "  Downloading keras_tuner-1.4.7-py3-none-any.whl (129 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/129.1 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m129.1/129.1 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: keras in /usr/local/lib/python3.10/dist-packages (from keras-tuner) (2.15.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from keras-tuner) (24.1)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from keras-tuner) (2.31.0)\n",
            "Collecting kt-legacy (from keras-tuner)\n",
            "  Downloading kt_legacy-1.0.5-py3-none-any.whl (9.6 kB)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->keras-tuner) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->keras-tuner) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->keras-tuner) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->keras-tuner) (2024.6.2)\n",
            "Installing collected packages: kt-legacy, keras-tuner\n",
            "Successfully installed keras-tuner-1.4.7 kt-legacy-1.0.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eoMjGwowM_-j"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import time\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras.applications import Xception, ResNet50V2\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Input, Dropout, BatchNormalization, Activation\n",
        "from tensorflow.keras.optimizers import Adam, SGD\n",
        "from tensorflow.keras.losses import CategoricalCrossentropy\n",
        "from tensorflow.keras.metrics import CategoricalAccuracy\n",
        "from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\n",
        "from keras import regularizers\n",
        "from tensorflow.keras.models import Sequential\n",
        "from keras.models import clone_model"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vBEhqPaYNYW4",
        "outputId": "e53c2953-ef63-488b-b4b6-99fb896e6408"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TW76bGu6M_-m"
      },
      "outputs": [],
      "source": [
        "base_dir = '/content/drive/MyDrive/dataset'\n",
        "train_dir = os.path.join(base_dir, 'train')\n",
        "test_dir = os.path.join(base_dir, 'test')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-1nDMQkmM_-o"
      },
      "outputs": [],
      "source": [
        "img_height, img_width = 224, 224\n",
        "batch_size = 30\n",
        "epochs = 5\n",
        "cls_epochs = 100\n",
        "latent_dim = 512\n",
        "cls_model_count = 50\n",
        "subset_fraction = 0.8\n",
        "subset_size = int(latent_dim * subset_fraction)\n",
        "learning_rate = 1e-3\n",
        "cls_learning_rate = 1e-1\n",
        "cls_depth = 3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LpbHbZxnM_-q",
        "outputId": "70ef1b7b-116e-46f9-a9f4-60588e737a3c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 8640 images belonging to 12 classes.\n",
            "Found 960 images belonging to 12 classes.\n",
            "Found 2400 images belonging to 12 classes.\n"
          ]
        }
      ],
      "source": [
        "train_datagen = ImageDataGenerator(\n",
        "    rescale=1./255,\n",
        "    rotation_range=40,\n",
        "    zoom_range=0.2,\n",
        "    validation_split=0.1,\n",
        "    horizontal_flip=True,\n",
        "    fill_mode='nearest'\n",
        ")\n",
        "\n",
        "val_datagen = ImageDataGenerator(\n",
        "    rescale=1./255,\n",
        "    validation_split=0.1\n",
        ")\n",
        "\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "    train_dir,\n",
        "    target_size=(img_height, img_width),\n",
        "    batch_size=batch_size,\n",
        "    seed=1337,\n",
        "    shuffle=True,\n",
        "    subset='training',\n",
        "    class_mode='categorical'\n",
        ")\n",
        "\n",
        "val_generator = train_datagen.flow_from_directory(\n",
        "    train_dir,\n",
        "    target_size=(img_height, img_width),\n",
        "    batch_size=batch_size,\n",
        "    seed=1337,\n",
        "    shuffle=True,\n",
        "    subset='validation',\n",
        "    class_mode='categorical'\n",
        ")\n",
        "\n",
        "test_generator = test_datagen.flow_from_directory(\n",
        "    test_dir,\n",
        "    target_size=(img_height, img_width),\n",
        "    batch_size=batch_size,\n",
        "    class_mode='categorical'\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "set(train_generator.filepaths).intersection(val_generator.filepaths)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Y8OaZ_Q7HgE",
        "outputId": "b7ae5ca6-9e3c-45ca-a1c2-92bc9b10ced9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "set()"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "base_model = ResNet50V2(weights='imagenet', include_top=False, input_shape=(img_height, img_width, 3))"
      ],
      "metadata": {
        "id": "37CNjht2dYxl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n9ZuXUDuM_-r"
      },
      "source": [
        "İLK DENEME (Burada Xception ve XGBoost'u birleştirmeye çalıştım. Sadece arka arkaya değil, aklımda XGBoost'un loss skoruyla tüm modelin ağırlıklarını güncellemek vardı. Sadece XGBoost değil, özellik çıkarımı için kullandığım Xception da güncellenecekti ama çok uyumsuzluk çıktı iki kütüphane arasında o yüzden yapamadım hocam.)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tD_BDlLNM_-w"
      },
      "outputs": [],
      "source": [
        "base_model = Xception(weights='imagenet', include_top=False, input_shape=(img_height, img_width, 3))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bUxY9-gdM_-y"
      },
      "outputs": [],
      "source": [
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = Dense(1024, activation='relu')(x)\n",
        "predictions = Dense(latent_dim, activation='linear')(x)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UYMqU0ZBM_-1"
      },
      "outputs": [],
      "source": [
        "model = Model(inputs=base_model.input, outputs=predictions)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nObpYOliM_-2"
      },
      "outputs": [],
      "source": [
        "for layer in base_model.layers:\n",
        "    layer.trainable = False"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yQnfzlDpM_-5"
      },
      "outputs": [],
      "source": [
        "optimizer = Adam(learning_rate=0.001)\n",
        "loss_fn = CategoricalCrossentropy()\n",
        "train_acc_metric = CategoricalAccuracy()\n",
        "val_acc_metric = CategoricalAccuracy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "smKvI6xBM_-6"
      },
      "outputs": [],
      "source": [
        "tf.config.run_functions_eagerly(True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "m7lss9Y3M_-8"
      },
      "outputs": [],
      "source": [
        "@tf.function\n",
        "def train_step(x, y):\n",
        "    with tf.GradientTape() as tape:\n",
        "        logits = model(x, training=True)\n",
        "        loss_value = loss_fn(y, logits)\n",
        "    grads = tape.gradient(loss_value, model.trainable_weights)\n",
        "    optimizer.apply_gradients(zip(grads, model.trainable_weights))\n",
        "    train_acc_metric.update_state(y, logits)\n",
        "    return loss_value"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lLIYcctDM_-9"
      },
      "outputs": [],
      "source": [
        "@tf.function\n",
        "def test_step(x, y):\n",
        "    val_logits = model(x, training=False)\n",
        "    val_acc_metric.update_state(y, val_logits)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1jQoQvxQM_-9"
      },
      "outputs": [],
      "source": [
        "import time\n",
        "for epoch in range(epochs):\n",
        "    print(f\"\\nStart of epoch {epoch}\")\n",
        "    start_time = time.time()\n",
        "\n",
        "    for step, (x_batch_train, y_batch_train) in enumerate(train_generator):\n",
        "        loss_value = train_step(x_batch_train, y_batch_train)\n",
        "\n",
        "        if step % 5 == 0:\n",
        "            print(\n",
        "                f\"Training loss (for 1 batch) at step {step}: {float(loss_value):.4f}\"\n",
        "            )\n",
        "            print(f\"Seen so far: {(step + 1) * batch_size} samples\")\n",
        "\n",
        "        if step + 1 >= len(train_generator):\n",
        "            train_generator.on_epoch_end()\n",
        "            break\n",
        "\n",
        "    train_acc = train_acc_metric.result()\n",
        "    print(f\"Training acc over epoch: {float(train_acc):.4f}\")\n",
        "\n",
        "    train_acc_metric.reset_state()\n",
        "\n",
        "    for x_batch_val, y_batch_val in val_generator:\n",
        "        test_step(x_batch_val, y_batch_val)\n",
        "\n",
        "    val_acc = val_acc_metric.result()\n",
        "    val_acc_metric.reset_state()\n",
        "    print(f\"Validation acc: {float(val_acc):.4f}\")\n",
        "    print(f\"Time taken: {time.time() - start_time:.2f}s\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Srn5YntvM_--"
      },
      "outputs": [],
      "source": [
        "model.compile(optimizer=optimizer, loss=loss_fn, metrics=[\"categorical_accuracy\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_adQmfeiM_--"
      },
      "outputs": [],
      "source": [
        "model.evaluate(test_generator)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
      ],
      "metadata": {
        "id": "4fTzL5vcddYQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "İKİNCİ DENEME (Tf'nin native olarak ensemble algoritmalarını desteklediğini öğrendikten sonra onları denemek istedim hocam ama burada da stacking çalışmadığını gördüm uzun bir süre farklı yollar denedikten sonra.)"
      ],
      "metadata": {
        "id": "VGQQ927MdfuH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "predictions = tfdf.keras.RandomForestModel()"
      ],
      "metadata": {
        "id": "gIe8i1Eudmx_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Model(inputs=base_model.input, outputs=predictions)"
      ],
      "metadata": {
        "id": "Iva7bDWLdoCE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for layer in base_model.layers:\n",
        "    layer.trainable = False"
      ],
      "metadata": {
        "id": "MSguN0zFdpS8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
      ],
      "metadata": {
        "id": "bONYN3MJfNtS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "ÜÇÜNCÜ DENEME (Burada keras kullanılarak türetilen küçük classification modelleri üretip bootstrapping ile kendi ensemble modelimi kendim oluşturmak istedim ama her bir öğrenici tarafından üretilen gradient'leri bir türlü CNN modelini güncellemek için birleştiremedim.)"
      ],
      "metadata": {
        "id": "q_mfvQCmfPut"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "latent_vector = Dense(latent_dim, activation='linear')(x)"
      ],
      "metadata": {
        "id": "vJkEM_EFfs_k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Model(inputs=base_model.input, outputs=latent_vector)"
      ],
      "metadata": {
        "id": "KKGp6kxmp7_L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for layer in base_model.layers:\n",
        "    layer.trainable = False"
      ],
      "metadata": {
        "id": "ojUaGiENpRus"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "optimizer = Adam(learning_rate=0.001)\n",
        "train_acc_metric = CategoricalAccuracy()\n",
        "val_acc_metric = CategoricalAccuracy()"
      ],
      "metadata": {
        "id": "BYs58gaJpUXL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cls_model = Sequential()\n",
        "cls_model.add(Input(shape=(subset_size,)))\n",
        "cls_model.add(Dense(1024, activation='relu'))\n",
        "cls_model.add(Dense(512, activation='relu'))\n",
        "cls_model.add(Dense(256, activation='relu'))\n",
        "cls_model.add(Dense(64, activation='relu'))\n",
        "cls_model.add(Dense(train_generator.num_classes, activation='softmax'))\n",
        "\n",
        "def create_clone_models_with_opt_and_loss():\n",
        "    return [clone_model(cls_model) for _ in range(cls_model_count)], \\\n",
        "           [Adam(learning_rate=learning_rate) for _ in range(cls_model_count)], \\\n",
        "           [CategoricalCrossentropy() for _ in range(cls_model_count)]"
      ],
      "metadata": {
        "id": "nqpCzIgNg5zu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def train_model_on_subset(model, loss, X, y):\n",
        "    indices = np.random.choice(latent_dim, subset_size, replace=False)\n",
        "\n",
        "    X_subset = tf.gather(X, indices, axis=1)\n",
        "    y_subset = y\n",
        "\n",
        "    with tf.GradientTape() as tape:\n",
        "        logits = model(X_subset, training=True)\n",
        "        loss_value = loss(y_subset, logits)\n",
        "        return tape, logits, loss_value"
      ],
      "metadata": {
        "id": "JSKyiGjAiXrR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def test_model_on_subset(model, loss, X, y):\n",
        "    indices = np.random.choice(latent_dim, subset_size, replace=False)\n",
        "\n",
        "    X_subset = tf.gather(X, indices, axis=1)\n",
        "    y_subset = y\n",
        "\n",
        "    logits = model(X_subset, training=True)\n",
        "    loss_value = loss(y_subset, logits)\n",
        "    return logits, loss_value"
      ],
      "metadata": {
        "id": "XEldYpzjSlaM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def train_step(models, opts, losses, X, y):\n",
        "    tapes = []\n",
        "    logits = []\n",
        "    pred_losses = []\n",
        "    # latent_vector_grads = []\n",
        "    with tf.GradientTape() as tape:\n",
        "        latent_vector = model(X, training=True)\n",
        "\n",
        "        for index in range(cls_model_count):\n",
        "            cls_tape, cls_logits, cls_loss = train_model_on_subset(models[index], losses[index], latent_vector, y)\n",
        "            tapes.append(cls_tape)\n",
        "            logits.append(cls_logits)\n",
        "            pred_losses.append(cls_loss)\n",
        "\n",
        "    for index in range(cls_model_count):\n",
        "        cls_grads = tapes[index].gradient(pred_losses[index], models[index].trainable_weights)\n",
        "        opts[index].apply_gradients(zip(cls_grads, models[index].trainable_weights))\n",
        "\n",
        "        # latent_vector_grads.append(tapes[index].gradient(pred_losses[index], latent_vector))\n",
        "\n",
        "    train_acc_metric.update_state(y, tf.reduce_mean(logits, axis=0))\n",
        "\n",
        "    # avg_latent_vector_grad = tf.reduce_mean(latent_vector_grads, axis=0)\n",
        "\n",
        "    # grads = tape.gradient(latent_vector, model.trainable_weights, output_gradients=avg_latent_vector_grad)\n",
        "    # optimizer.apply_gradients(zip(grads, model.trainable_weights))\n",
        "\n",
        "    return tf.reduce_mean(pred_losses, axis=0)"
      ],
      "metadata": {
        "id": "7GyUpTcNjBqm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def test_step(models, losees, X, y):\n",
        "    logits = []\n",
        "    pred_losses = []\n",
        "\n",
        "    latent_vector = model(X, training=False)\n",
        "\n",
        "    for index in range(cls_model_count):\n",
        "        cls_logits, cls_loss = test_model_on_subset(models[index], losses[index], latent_vector, y)\n",
        "        logits.append(cls_logits)\n",
        "        pred_losses.append(cls_loss)\n",
        "\n",
        "    val_acc_metric.update_state(y, tf.reduce_mean(logits, axis=0))\n",
        "\n",
        "    return tf.reduce_mean(pred_losses, axis=0)"
      ],
      "metadata": {
        "id": "zqGlt5rOjDzF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "models, opts, losses = create_clone_models_with_opt_and_loss()"
      ],
      "metadata": {
        "id": "rQXGyNzGqCgN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import gc\n",
        "gc.collect()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uR6wqniqt7eJ",
        "outputId": "31885c20-bf18-44da-8016-6537157f0b49"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1171"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_loss_history = []\n",
        "train_accuracy_history = []\n",
        "val_loss_history = []\n",
        "val_accuracy_history = []"
      ],
      "metadata": {
        "id": "ncTahOWOY2fI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for epoch in range(epochs):\n",
        "    print(f\"\\nStart of epoch {epoch}\")\n",
        "    start_time = time.time()\n",
        "\n",
        "    train_loss_value_for_epoch = None\n",
        "    val_loss_value_for_epoch = None\n",
        "    for step, (X_batch_train, y_batch_train) in enumerate(train_generator):\n",
        "        loss_value = train_step(models, opts, losses, X_batch_train, y_batch_train)\n",
        "\n",
        "\n",
        "        if step % 25 == 0:\n",
        "            print(\n",
        "                f\"Training loss (for 1 batch) at step {step}: {float(loss_value):.4f}\"\n",
        "            )\n",
        "            print(f\"Seen so far: {(step + 1) * batch_size} samples\")\n",
        "\n",
        "        if step + 1 >= len(train_generator):\n",
        "            train_generator.on_epoch_end()\n",
        "            train_loss_value_for_epoch = loss_value\n",
        "            break\n",
        "\n",
        "    train_loss_history.append(train_loss_value_for_epoch)\n",
        "\n",
        "    train_acc = train_acc_metric.result()\n",
        "    train_acc_metric.reset_state()\n",
        "    print(f\"Training acc over epoch: {float(train_acc):.4f}\")\n",
        "\n",
        "    train_accuracy_history.append(train_acc)\n",
        "\n",
        "    for step, (X_batch_val, y_batch_val) in enumerate(val_generator):\n",
        "        loss_value = test_step(models, losses, x_batch_val, y_batch_val)\n",
        "\n",
        "        print(\n",
        "            f\"Validation loss (for 1 batch) at step {step}: {float(loss_value):.4f}\"\n",
        "        )\n",
        "        print(f\"Seen so far: {(step + 1) * batch_size} samples\")\n",
        "\n",
        "        if step + 1 >= len(val_generator):\n",
        "            val_generator.on_epoch_end()\n",
        "            val_loss_value_for_epoch = loss_value\n",
        "            break\n",
        "\n",
        "    val_loss_history.append(val_loss_value_for_epoch)\n",
        "\n",
        "    val_acc = val_acc_metric.result()\n",
        "    val_acc_metric.reset_state()\n",
        "    print(f\"Validation acc: {float(val_acc):.4f}\")\n",
        "    print(f\"Time taken: {time.time() - start_time:.2f}s\")\n",
        "\n",
        "    val_accuracy_history.append(val_acc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "uEU4Fw_AjFrW",
        "outputId": "0f75066d-0945-45a6-c547-e02884951fb2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Start of epoch 0\n",
            "Training loss (for 1 batch) at step 0: 2.5783\n",
            "Seen so far: 32 samples\n",
            "Training loss (for 1 batch) at step 25: 12.0782\n",
            "Seen so far: 832 samples\n",
            "Training loss (for 1 batch) at step 50: 5.2677\n",
            "Seen so far: 1632 samples\n",
            "Training loss (for 1 batch) at step 75: 3.2382\n",
            "Seen so far: 2432 samples\n",
            "Training loss (for 1 batch) at step 100: 2.8138\n",
            "Seen so far: 3232 samples\n",
            "Training loss (for 1 batch) at step 125: 2.1180\n",
            "Seen so far: 4032 samples\n",
            "Training loss (for 1 batch) at step 150: 2.0749\n",
            "Seen so far: 4832 samples\n",
            "Training loss (for 1 batch) at step 175: 1.6448\n",
            "Seen so far: 5632 samples\n",
            "Training loss (for 1 batch) at step 200: 1.3250\n",
            "Seen so far: 6432 samples\n",
            "Training loss (for 1 batch) at step 225: 4.4367\n",
            "Seen so far: 7232 samples\n",
            "Training loss (for 1 batch) at step 250: 3.6593\n",
            "Seen so far: 8032 samples\n",
            "Training acc over epoch: 0.2608\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n",
            "Training loss (for 1 batch) at step 269: 1.5633\n",
            "Seen so far: 8640 samples\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-19-97909412783d>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Training acc over epoch: {float(train_acc):.4f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mx_batch_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_batch_val\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mval_generator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m         \u001b[0mtest_step\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlosses\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_batch_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_batch_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m         print(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/preprocessing/image.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__next__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 156\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    157\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/preprocessing/image.py\u001b[0m in \u001b[0;36mnext\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    166\u001b[0m         \u001b[0;31m# The transformation of images is not under thread lock\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    167\u001b[0m         \u001b[0;31m# so it can be done in parallel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 168\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_batches_of_transformed_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex_array\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    169\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    170\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_batches_of_transformed_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex_array\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/preprocessing/image.py\u001b[0m in \u001b[0;36m_get_batches_of_transformed_samples\u001b[0;34m(self, index_array)\u001b[0m\n\u001b[1;32m    382\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimage_data_generator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m                 \u001b[0mparams\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimage_data_generator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_random_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 384\u001b[0;31m                 \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimage_data_generator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    385\u001b[0m                 \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimage_data_generator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstandardize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    386\u001b[0m             \u001b[0mbatch_x\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/preprocessing/image.py\u001b[0m in \u001b[0;36mapply_transform\u001b[0;34m(self, x, transform_parameters)\u001b[0m\n\u001b[1;32m   2010\u001b[0m         \u001b[0mimg_channel_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchannel_axis\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2011\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2012\u001b[0;31m         x = apply_affine_transform(\n\u001b[0m\u001b[1;32m   2013\u001b[0m             \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2014\u001b[0m             \u001b[0mtransform_parameters\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"theta\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/preprocessing/image.py\u001b[0m in \u001b[0;36mapply_affine_transform\u001b[0;34m(x, theta, tx, ty, shear, zx, zy, row_axis, col_axis, channel_axis, fill_mode, cval, order)\u001b[0m\n\u001b[1;32m   2608\u001b[0m         \u001b[0mfinal_offset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransform_matrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2609\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2610\u001b[0;31m         channel_images = [\n\u001b[0m\u001b[1;32m   2611\u001b[0m             ndimage.interpolation.affine_transform(\n\u001b[1;32m   2612\u001b[0m                 \u001b[0mx_channel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/preprocessing/image.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   2609\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2610\u001b[0m         channel_images = [\n\u001b[0;32m-> 2611\u001b[0;31m             ndimage.interpolation.affine_transform(\n\u001b[0m\u001b[1;32m   2612\u001b[0m                 \u001b[0mx_channel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2613\u001b[0m                 \u001b[0mfinal_affine_matrix\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/scipy/ndimage/_interpolation.py\u001b[0m in \u001b[0;36maffine_transform\u001b[0;34m(input, matrix, offset, output_shape, output, order, mode, cval, prefilter)\u001b[0m\n\u001b[1;32m    612\u001b[0m                              mode, cval, npad, False)\n\u001b[1;32m    613\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 614\u001b[0;31m         _nd_image.geometric_transform(filtered, None, None, matrix, offset,\n\u001b[0m\u001b[1;32m    615\u001b[0m                                       \u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnpad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    616\u001b[0m                                       None)\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
      ],
      "metadata": {
        "id": "GPDMktEAbsRb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "DÖRDÜNCÜ DENEME (Burada keras yerine CatBoost kullanmak istedim. CNN modeli latent vektör çıkışı verecekti ve ben o vektörü alıp CatBoost'a input olarak verecektim. Bu model sorunsuz çalıştı aslında, 0.83'lere çıkan doğruluk da verdi bana ama CatBoost ile CNN modeli arasında bir bağlantı olmadığı için CNN üzerinde fine tuning yapamadım.)"
      ],
      "metadata": {
        "id": "RK50E3f_bwpE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tf.config.run_functions_eagerly(True)"
      ],
      "metadata": {
        "id": "0OEBDZJziaM8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "latent_vector = Dense(latent_dim, activation='linear')(x)"
      ],
      "metadata": {
        "id": "POAIGTMEcL_f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Model(inputs=base_model.input, outputs=latent_vector)"
      ],
      "metadata": {
        "id": "6DXnfkWncOjf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for layer in base_model.layers:\n",
        "    layer.trainable = False"
      ],
      "metadata": {
        "id": "mL9iEbwQcR4_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "optimizer = Adam(learning_rate=learning_rate)\n",
        "loss_fn = CategoricalCrossentropy()\n",
        "train_acc_metric = CategoricalAccuracy()\n",
        "val_acc_metric = CategoricalAccuracy()"
      ],
      "metadata": {
        "id": "RPUiIbkGcR25"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from catboost import CatBoostClassifier, Pool, sum_models"
      ],
      "metadata": {
        "id": "9wjE7hDUfZ_5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cls_model = CatBoostClassifier(\n",
        "    iterations=cls_epochs,\n",
        "    learning_rate=cls_learning_rate,\n",
        "    depth=cls_depth,\n",
        "    classes_count=train_generator.num_classes,\n",
        "    verbose=0\n",
        ")"
      ],
      "metadata": {
        "id": "79WnBhx9c5Mt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "first_time = True"
      ],
      "metadata": {
        "id": "BITDF0esO6CZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# @tf.function\n",
        "# def train_model_on_subset(X, y):\n",
        "#     global first_time\n",
        "\n",
        "#     y_argmax = np.argmax(y, axis=1)\n",
        "#     batch_data = Pool(X, label=y_argmax)\n",
        "\n",
        "#     print(X.shape)\n",
        "#     print(y_argmax.shape)\n",
        "\n",
        "#     if first_time:\n",
        "#       cls_model.fit(X=batch_data)\n",
        "#       first_time = False\n",
        "#     else:\n",
        "#       batch_data.set_baseline(cls_model.predict(batch_data, prediction_type=\"Probability\", verbose=0))\n",
        "#       cls_temp_model.fit(X=batch_data)\n",
        "#       model = sum_models([cls_model, cls_temp_model])\n",
        "\n",
        "#     logits = cls_model.predict(X, prediction_type=\"Probability\", verbose=0)\n",
        "#     loss_value = loss_fn(y, logits)\n",
        "#     return logits, loss_value"
      ],
      "metadata": {
        "id": "AtC25dNFa4VM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def train_model_on_subset(X, y):\n",
        "    global first_time\n",
        "\n",
        "    y_argmax = np.argmax(y, axis=1)\n",
        "\n",
        "    if first_time:\n",
        "      cls_model.fit(X, y_argmax)\n",
        "      first_time = False\n",
        "    else:\n",
        "      cls_model.fit(X, y_argmax, init_model=cls_model)\n",
        "    logits = cls_model.predict(X, prediction_type=\"Probability\", verbose=0)\n",
        "    loss_value = loss_fn(y, logits)\n",
        "    return logits, loss_value"
      ],
      "metadata": {
        "id": "I-R8mdRpcaPh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def test_model_on_subset(X, y):\n",
        "    logits = cls_model.predict(X, prediction_type=\"Probability\", verbose=0)\n",
        "    loss_value = loss_fn(y, logits)\n",
        "    return logits, loss_value"
      ],
      "metadata": {
        "id": "iDzqOmyHgOhy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def train_step(X, y):\n",
        "    with tf.GradientTape() as tape:\n",
        "        latent_vector = model(X, training=False)\n",
        "        np_latent_vector = latent_vector.numpy()\n",
        "        # np_latent_vector = np_latent_vector.astype(np.float32)\n",
        "\n",
        "        logits, loss_value = train_model_on_subset(np_latent_vector, y)\n",
        "\n",
        "        train_acc_metric.update_state(y, logits)\n",
        "\n",
        "    return loss_value"
      ],
      "metadata": {
        "id": "EqrC7-0Kc1-M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def test_step(X, y):\n",
        "    latent_vector = model(X, training=False)\n",
        "    np_latent_vector = latent_vector.numpy()\n",
        "    # np_latent_vector = np_latent_vector.astype(np.float32)\n",
        "\n",
        "    logits, loss_value = test_model_on_subset(np_latent_vector, y)\n",
        "\n",
        "    val_acc_metric.update_state(y, logits)\n",
        "\n",
        "    return loss_value"
      ],
      "metadata": {
        "id": "ScMiuvo1gNe6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import gc\n",
        "gc.collect()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZF-5CbGujcUZ",
        "outputId": "16a83894-1a8d-4b6a-ce63-c77712275b95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_loss_history = []\n",
        "train_accuracy_history = []\n",
        "val_loss_history = []\n",
        "val_accuracy_history = []"
      ],
      "metadata": {
        "id": "TLTM7-wyw-rB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for epoch in range(epochs):\n",
        "    print(f\"\\nStart of epoch {epoch}\")\n",
        "    start_time = time.time()\n",
        "\n",
        "    train_loss_value_for_epoch = None\n",
        "    val_loss_value_for_epoch = None\n",
        "    for step, (X_batch_train, y_batch_train) in enumerate(train_generator):\n",
        "        loss_value = train_step(X_batch_train, y_batch_train)\n",
        "\n",
        "        if step % 25 == 0:\n",
        "            print(\n",
        "                f\"Training loss (for 1 batch) at step {step}: {float(loss_value):.4f}\"\n",
        "            )\n",
        "            print(f\"Seen so far: {(step + 1) * batch_size} samples\")\n",
        "\n",
        "        if step + 1 >= len(train_generator):\n",
        "            print(\n",
        "                f\"Training loss (for 1 batch) at last step: {float(loss_value):.4f}\"\n",
        "            )\n",
        "            print(f\"Seen so far: {(step + 1) * batch_size} samples\")\n",
        "\n",
        "            train_generator.on_epoch_end()\n",
        "            train_loss_value_for_epoch = loss_value\n",
        "            break\n",
        "\n",
        "    train_loss_history.append(train_loss_value_for_epoch)\n",
        "\n",
        "    train_acc = train_acc_metric.result()\n",
        "    train_acc_metric.reset_state()\n",
        "    print(f\"Training acc over epoch: {float(train_acc):.4f}\")\n",
        "\n",
        "    train_accuracy_history.append(train_acc)\n",
        "\n",
        "    for step, (X_batch_val, y_batch_val) in enumerate(val_generator):\n",
        "        loss_value = test_step(X_batch_val, y_batch_val)\n",
        "\n",
        "        print(\n",
        "            f\"Validation loss (for 1 batch) at step {step}: {float(loss_value):.4f}\"\n",
        "        )\n",
        "        print(f\"Seen so far: {(step + 1) * batch_size} samples\")\n",
        "\n",
        "        if step + 1 >= len(val_generator):\n",
        "            val_generator.on_epoch_end()\n",
        "            val_loss_value_for_epoch = loss_value\n",
        "            break\n",
        "\n",
        "    val_loss_history.append(val_loss_value_for_epoch)\n",
        "\n",
        "    val_acc = val_acc_metric.result()\n",
        "    val_acc_metric.reset_state()\n",
        "    print(f\"Validation acc: {float(val_acc):.4f}\")\n",
        "    print(f\"Time taken: {time.time() - start_time:.2f}s\")\n",
        "\n",
        "    val_accuracy_history.append(val_acc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "h7GQRJChgs9f",
        "outputId": "81066d50-cd8e-4eb5-bbb6-6f27b26b9a9b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Start of epoch 0\n",
            "Training loss (for 1 batch) at step 0: 1.4677\n",
            "Seen so far: 80 samples\n",
            "Training loss (for 1 batch) at step 25: 1.1843\n",
            "Seen so far: 2080 samples\n",
            "Training loss (for 1 batch) at step 50: 1.0227\n",
            "Seen so far: 4080 samples\n",
            "Training loss (for 1 batch) at step 75: 1.0406\n",
            "Seen so far: 6080 samples\n",
            "Training loss (for 1 batch) at step 100: 1.2103\n",
            "Seen so far: 8080 samples\n",
            "Training loss (for 1 batch) at last step: 1.2582\n",
            "Seen so far: 8640 samples\n",
            "Training acc over epoch: 0.6781\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "InvalidArgumentError",
          "evalue": "{{function_node __wrapped__Squeeze_device_/job:localhost/replica:0/task:0/device:CPU:0}} Can not squeeze dim[0], expected a dimension of 1, got 80 [Op:Squeeze] name: ",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-24-87669c519f31>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mX_batch_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_batch_val\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_generator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 35\u001b[0;31m         \u001b[0mloss_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_step\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_batch_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_batch_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     36\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m         print(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 153\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    154\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-21-60d73c69fdc6>\u001b[0m in \u001b[0;36mtest_step\u001b[0;34m(X, y)\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mlogits\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_model_on_subset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_latent_vector\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     \u001b[0mval_acc_metric\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate_state\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduce_mean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogits\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mloss_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/metrics_utils.py\u001b[0m in \u001b[0;36mdecorated\u001b[0;34m(metric_obj, *args, **kwargs)\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mtf_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgraph_context_for_symbolic_tensors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mupdate_state_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mv1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_default_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_operations\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/metrics/base_metric.py\u001b[0m in \u001b[0;36mupdate_state_fn\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    138\u001b[0m                     \u001b[0mobj_update_state\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontrol_status\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m                 )\n\u001b[0;32m--> 140\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mag_update_state\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    141\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/metrics/base_metric.py\u001b[0m in \u001b[0;36mupdate_state\u001b[0;34m(self, y_true, y_pred, sample_weight)\u001b[0m\n\u001b[1;32m    721\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__internal__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontrol_status_ctx\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    722\u001b[0m         )\n\u001b[0;32m--> 723\u001b[0;31m         \u001b[0mmatches\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fn_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    724\u001b[0m         \u001b[0mmask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlosses_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_mask\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    725\u001b[0m         sample_weight = losses_utils.apply_valid_mask(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/metrics/accuracy_metrics.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m    167\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"categorical_accuracy\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    168\u001b[0m         super().__init__(\n\u001b[0;32m--> 169\u001b[0;31m             lambda y_true, y_pred: metrics_utils.sparse_categorical_matches(\n\u001b[0m\u001b[1;32m    170\u001b[0m                 \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    171\u001b[0m             ),\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/metrics_utils.py\u001b[0m in \u001b[0;36msparse_categorical_matches\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m    959\u001b[0m         \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbackend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mint_shape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbackend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mint_shape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    960\u001b[0m     ):\n\u001b[0;32m--> 961\u001b[0;31m         \u001b[0my_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    962\u001b[0m         \u001b[0mreshape_matches\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    963\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mInvalidArgumentError\u001b[0m: {{function_node __wrapped__Squeeze_device_/job:localhost/replica:0/task:0/device:CPU:0}} Can not squeeze dim[0], expected a dimension of 1, got 80 [Op:Squeeze] name: "
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
      ],
      "metadata": {
        "id": "3iLtDGZL_gxc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "BEŞİNCİ DENEME (Burada 4. denemedeki modelin aynısını kullandım ama gradient'leri yaklaşık olarak kendim üretmek istedim ki CNN modelini fine tune edebileyim ama burada da tensorflow gradient tape'in CatBoost ile bir bağlantısı olmadığı için doğru gradient'leri CNN tarafında üretemedim. O yüzden burası çalışamadı.)"
      ],
      "metadata": {
        "id": "5y54DoaH_dhW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tf.config.run_functions_eagerly(True)"
      ],
      "metadata": {
        "id": "YegQjsG7MLKX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = Dense(512, activation='relu')(x)\n",
        "x = Dense(256, activation='relu')(x)\n",
        "x = Dense(128, activation='relu')(x)\n",
        "x = Dense(64, activation='relu')(x)\n",
        "x = Dense(128, activation='relu')(x)\n",
        "x = Dense(512, activation='relu')(x)\n",
        "latent_vector = Dense(latent_dim, activation='linear')(x)"
      ],
      "metadata": {
        "id": "sRR-rVkd_q9R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Model(inputs=base_model.input, outputs=latent_vector)"
      ],
      "metadata": {
        "id": "ycsaYX4g_vZV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for layer in base_model.layers:\n",
        "    layer.trainable = False"
      ],
      "metadata": {
        "id": "n_F-bBQi_xhx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "optimizer = Adam(learning_rate=learning_rate)\n",
        "loss_fn = CategoricalCrossentropy()\n",
        "train_acc_metric = CategoricalAccuracy()\n",
        "val_acc_metric = CategoricalAccuracy()"
      ],
      "metadata": {
        "id": "VnoPYcv0_0V2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from catboost import CatBoostClassifier, Pool, sum_models"
      ],
      "metadata": {
        "id": "dZNeyqnP_6AJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cls_model = CatBoostClassifier(\n",
        "    iterations=cls_epochs,\n",
        "    learning_rate=cls_learning_rate,\n",
        "    depth=cls_depth,\n",
        "    classes_count=train_generator.num_classes,\n",
        "    verbose=0\n",
        ")"
      ],
      "metadata": {
        "id": "X6hOh0gu_7wu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "first_time = True"
      ],
      "metadata": {
        "id": "AcYA27hxAAU-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def approximate_catboost_gradients(X, logits, epsilon=1e-5):\n",
        "    gradients = np.zeros((batch_size, latent_dim, train_generator.num_classes))\n",
        "\n",
        "    for i in range(batch_size):\n",
        "        for j in range(latent_dim):\n",
        "            perturbed_data = np.copy(X[i, :])\n",
        "            perturbed_data[j] += epsilon\n",
        "            perturbed_predictions = cls_model.predict(perturbed_data, prediction_type=\"Probability\", verbose=0)\n",
        "\n",
        "            gradients[i, j, :] = (perturbed_predictions - logits[i, :]) / epsilon\n",
        "\n",
        "    return gradients"
      ],
      "metadata": {
        "id": "Nf2zPebq6YVT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def train_model_on_subset(X, y):\n",
        "    global first_time\n",
        "\n",
        "    y_argmax = np.argmax(y, axis=1)\n",
        "\n",
        "    if first_time:\n",
        "      cls_model.fit(X, y_argmax)\n",
        "      first_time = False\n",
        "    else:\n",
        "      cls_model.fit(X, y_argmax, init_model=cls_model)\n",
        "    logits = cls_model.predict(X, prediction_type=\"Probability\", verbose=0)\n",
        "    grads = approximate_catboost_gradients(X, logits)\n",
        "    loss_value = loss_fn(y, logits)\n",
        "    return logits, loss_value, grads"
      ],
      "metadata": {
        "id": "w4HkaMXTADGG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def test_model_on_subset(X, y):\n",
        "    logits = cls_model.predict(X, prediction_type=\"Probability\", verbose=0)\n",
        "    loss_value = loss_fn(y, logits)\n",
        "    return logits, loss_value"
      ],
      "metadata": {
        "id": "DKvybGAgANGW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def train_step(X, y):\n",
        "    with tf.GradientTape() as tape:\n",
        "        latent_vector = model(X, training=True)\n",
        "\n",
        "    np_latent_vector = latent_vector.numpy()\n",
        "\n",
        "    logits, loss_value, cls_grads = train_model_on_subset(np_latent_vector, y)\n",
        "\n",
        "    grads = tape.gradient(tf.cast(latent_vector, tf.double), model.trainable_weights, output_gradients=tf.convert_to_tensor(cls_grads, dtype=tf.double))\n",
        "\n",
        "    print(\"--------------------------\")\n",
        "    print(grads)\n",
        "    print(\"--------------------------\")\n",
        "\n",
        "    optimizer.apply_gradients(zip(grads, model.trainable_weights))\n",
        "\n",
        "    train_acc_metric.update_state(y, logits)\n",
        "\n",
        "    return loss_value"
      ],
      "metadata": {
        "id": "xXcVWOjwAPNh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def test_step(X, y):\n",
        "    latent_vector = model(X, training=False)\n",
        "\n",
        "    np_latent_vector = latent_vector.numpy()\n",
        "\n",
        "    logits, loss_value = test_model_on_subset(np_latent_vector, y)\n",
        "\n",
        "    val_acc_metric.update_state(y, logits)\n",
        "\n",
        "    return loss_value"
      ],
      "metadata": {
        "id": "w8DgacI2APec"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import gc\n",
        "gc.collect()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DsSSXeM1APbp",
        "outputId": "92d60416-f4b8-4e7e-b848-8d915f7efe97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "573"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_loss_history = []\n",
        "train_accuracy_history = []\n",
        "val_loss_history = []\n",
        "val_accuracy_history = []"
      ],
      "metadata": {
        "id": "AfyfJMQjAXuc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for epoch in range(epochs):\n",
        "    print(f\"\\nStart of epoch {epoch}\")\n",
        "    start_time = time.time()\n",
        "\n",
        "    train_loss_value_for_epoch = None\n",
        "    val_loss_value_for_epoch = None\n",
        "    for step, (X_batch_train, y_batch_train) in enumerate(train_generator):\n",
        "        loss_value = train_step(X_batch_train, y_batch_train)\n",
        "\n",
        "        if step % 25 == 0:\n",
        "            print(\n",
        "                f\"Training loss (for 1 batch) at step {step}: {float(loss_value):.4f}\"\n",
        "            )\n",
        "            print(f\"Seen so far: {(step + 1) * batch_size} samples\")\n",
        "\n",
        "        if step + 1 >= len(train_generator):\n",
        "            print(\n",
        "                f\"Training loss (for 1 batch) at last step: {float(loss_value):.4f}\"\n",
        "            )\n",
        "            print(f\"Seen so far: {(step + 1) * batch_size} samples\")\n",
        "\n",
        "            train_generator.on_epoch_end()\n",
        "            train_loss_value_for_epoch = loss_value\n",
        "            break\n",
        "\n",
        "    train_loss_history.append(train_loss_value_for_epoch)\n",
        "\n",
        "    train_acc = train_acc_metric.result()\n",
        "    train_acc_metric.reset_state()\n",
        "    print(f\"Training acc over epoch: {float(train_acc):.4f}\")\n",
        "\n",
        "    train_accuracy_history.append(train_acc)\n",
        "\n",
        "    for step, (X_batch_val, y_batch_val) in enumerate(val_generator):\n",
        "        loss_value = test_step(X_batch_val, y_batch_val)\n",
        "\n",
        "        print(\n",
        "            f\"Validation loss (for 1 batch) at step {step}: {float(loss_value):.4f}\"\n",
        "        )\n",
        "        print(f\"Seen so far: {(step + 1) * batch_size} samples\")\n",
        "\n",
        "        if step + 1 >= len(val_generator):\n",
        "            val_generator.on_epoch_end()\n",
        "            val_loss_value_for_epoch = loss_value\n",
        "            break\n",
        "\n",
        "    val_loss_history.append(val_loss_value_for_epoch)\n",
        "\n",
        "    val_acc = val_acc_metric.result()\n",
        "    val_acc_metric.reset_state()\n",
        "    print(f\"Validation acc: {float(val_acc):.4f}\")\n",
        "    print(f\"Time taken: {time.time() - start_time:.2f}s\")\n",
        "\n",
        "    val_accuracy_history.append(val_acc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "nUzYbfU4AYDD",
        "outputId": "29112822-dfa0-4d5d-836a-20a2c26d5c78"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Start of epoch 0\n",
            "--------------------------\n",
            "[None, None, None, None, None, None, None, None, None, None, None, None, None, None]\n",
            "--------------------------\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "No gradients provided for any variable: (['dense_7/kernel:0', 'dense_7/bias:0', 'dense_8/kernel:0', 'dense_8/bias:0', 'dense_9/kernel:0', 'dense_9/bias:0', 'dense_10/kernel:0', 'dense_10/bias:0', 'dense_11/kernel:0', 'dense_11/bias:0', 'dense_12/kernel:0', 'dense_12/bias:0', 'dense_13/kernel:0', 'dense_13/bias:0'],). Provided `grads_and_vars` is ((None, <tf.Variable 'dense_7/kernel:0' shape=(2048, 512) dtype=float32, numpy=\narray([[-0.02552587,  0.01976389,  0.00809691, ...,  0.03406109,\n         0.02645925, -0.02544805],\n       [ 0.01299418, -0.0170031 , -0.03648469, ..., -0.01851693,\n         0.00290418,  0.02563923],\n       [ 0.04660729,  0.03434531, -0.03094377, ..., -0.04604105,\n         0.0275844 , -0.02141793],\n       ...,\n       [-0.04295367,  0.04068042, -0.04646092, ..., -0.00765682,\n        -0.0314377 ,  0.01016685],\n       [ 0.02378953, -0.03602906,  0.03337136, ..., -0.00417072,\n         0.02366   , -0.03997187],\n       [-0.0358343 , -0.03580118,  0.03382479, ..., -0.01303279,\n        -0.01497388, -0.04230733]], dtype=float32)>), (None, <tf.Variable 'dense_7/bias:0' shape=(512,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_8/kernel:0' shape=(512, 256) dtype=float32, numpy=\narray([[ 0.02086265,  0.02332706, -0.06051782, ..., -0.05598741,\n         0.01838972,  0.05659715],\n       [-0.01310954,  0.0113893 , -0.06242167, ..., -0.04633114,\n         0.0746144 , -0.06857862],\n       [ 0.0664496 ,  0.00569495,  0.03757099, ...,  0.04487247,\n        -0.04233567, -0.0761048 ],\n       ...,\n       [-0.00831854,  0.02527932,  0.0285708 , ..., -0.03707599,\n        -0.05552133,  0.08596311],\n       [-0.04944529,  0.00294258, -0.02537289, ..., -0.06527176,\n         0.01741371, -0.01357797],\n       [-0.06996644,  0.03349697,  0.00422893, ..., -0.0860838 ,\n        -0.08703879,  0.04375622]], dtype=float32)>), (None, <tf.Variable 'dense_8/bias:0' shape=(256,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0.], dtype=float32)>), (None, <tf.Variable 'dense_9/kernel:0' shape=(256, 128) dtype=float32, numpy=\narray([[ 0.12033081, -0.05373654,  0.02663392, ..., -0.08796406,\n        -0.11885619, -0.08449531],\n       [ 0.06886703,  0.00450161,  0.10414788, ...,  0.0632323 ,\n         0.0042277 ,  0.09126043],\n       [-0.07957706,  0.01847595, -0.09642223, ..., -0.02962992,\n         0.09307149,  0.02513412],\n       ...,\n       [ 0.12343422, -0.08318385,  0.02477929, ...,  0.05406696,\n         0.00162023,  0.06306708],\n       [ 0.04871216,  0.03561947, -0.02371559, ..., -0.08433878,\n         0.08569053, -0.00358224],\n       [ 0.04788455, -0.08304456,  0.01552042, ...,  0.09460297,\n         0.04286188, -0.03483871]], dtype=float32)>), (None, <tf.Variable 'dense_9/bias:0' shape=(128,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_10/kernel:0' shape=(128, 64) dtype=float32, numpy=\narray([[-0.0827126 , -0.00493185,  0.03162396, ..., -0.00914375,\n         0.11447881, -0.16280256],\n       [-0.05804452, -0.15653934,  0.1296056 , ...,  0.11437871,\n         0.06764215,  0.09279843],\n       [ 0.08211516, -0.14055943, -0.05816016, ..., -0.05678428,\n        -0.17089397, -0.11608734],\n       ...,\n       [-0.00032622,  0.11405404,  0.1460417 , ...,  0.13476403,\n        -0.06605616,  0.04090284],\n       [ 0.16159762,  0.11361893,  0.16373132, ..., -0.03763781,\n        -0.01080169,  0.05053259],\n       [ 0.13582702, -0.1401776 , -0.13075566, ...,  0.10292341,\n         0.10859536, -0.09068341]], dtype=float32)>), (None, <tf.Variable 'dense_10/bias:0' shape=(64,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_11/kernel:0' shape=(64, 128) dtype=float32, numpy=\narray([[ 1.19467840e-01,  1.63714275e-01,  6.36813194e-02, ...,\n        -1.76699430e-01,  1.61476806e-01, -1.03466168e-01],\n       [ 1.39251053e-02,  9.07806009e-02,  2.31519341e-02, ...,\n        -1.53709471e-01,  1.20959803e-01, -2.39265561e-02],\n       [ 1.68845057e-04,  1.20320454e-01, -3.08394432e-02, ...,\n         1.16242483e-01, -2.36216187e-03,  7.05252886e-02],\n       ...,\n       [-8.13993067e-02, -8.63014460e-02, -3.48975062e-02, ...,\n        -6.61958754e-03, -4.67094183e-02, -1.25973463e-01],\n       [ 1.40289202e-01,  6.79326206e-02, -8.96530896e-02, ...,\n        -6.73756525e-02, -1.54251695e-01,  1.30747691e-01],\n       [ 1.17905721e-01, -4.96918112e-02, -3.33941728e-02, ...,\n        -6.83720037e-02,  1.44255176e-01,  1.33289203e-01]], dtype=float32)>), (None, <tf.Variable 'dense_11/bias:0' shape=(128,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_12/kernel:0' shape=(128, 512) dtype=float32, numpy=\narray([[-0.07316715, -0.07420337,  0.07920349, ...,  0.04626146,\n         0.03033251, -0.01651298],\n       [-0.06455964, -0.02142083, -0.01956726, ..., -0.07023789,\n        -0.02418061, -0.09071268],\n       [ 0.05767132, -0.01610187, -0.05593782, ...,  0.03817029,\n         0.00636166,  0.07514334],\n       ...,\n       [ 0.08139689, -0.00149868,  0.03027511, ...,  0.03220664,\n         0.09020318, -0.00463685],\n       [ 0.05548677, -0.00556727, -0.05179569, ..., -0.01093215,\n         0.07664791, -0.07656709],\n       [-0.04654097, -0.01588332, -0.06051368, ...,  0.00709353,\n         0.04597248, -0.03890476]], dtype=float32)>), (None, <tf.Variable 'dense_12/bias:0' shape=(512,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_13/kernel:0' shape=(512, 512) dtype=float32, numpy=\narray([[-0.03890856, -0.06441525,  0.00910039, ...,  0.05507798,\n         0.0526515 ,  0.07296643],\n       [ 0.07517453, -0.06645506,  0.01443084, ..., -0.06985577,\n        -0.03545515,  0.03019156],\n       [-0.02395447,  0.00168879,  0.03911324, ..., -0.06466243,\n        -0.03843629,  0.06649198],\n       ...,\n       [ 0.0746079 , -0.0573164 , -0.05750555, ...,  0.02206637,\n        -0.02558087,  0.02995131],\n       [ 0.07125003, -0.0144668 ,  0.06967948, ...,  0.03576095,\n         0.00583076,  0.0618074 ],\n       [ 0.0687181 , -0.00644151,  0.01994875, ...,  0.0094413 ,\n        -0.05031223, -0.01693055]], dtype=float32)>), (None, <tf.Variable 'dense_13/bias:0' shape=(512,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0.], dtype=float32)>)).",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-38-87669c519f31>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mval_loss_value_for_epoch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mX_batch_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_batch_train\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_generator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m         \u001b[0mloss_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_step\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_batch_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_batch_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mstep\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;36m25\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 153\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    154\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-34-965a5b60c2cd>\u001b[0m in \u001b[0;36mtrain_step\u001b[0;34m(X, y)\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"--------------------------\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m     \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrainable_weights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mtrain_acc_metric\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate_state\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogits\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/optimizer.py\u001b[0m in \u001b[0;36mapply_gradients\u001b[0;34m(self, grads_and_vars, name, skip_gradients_aggregation, **kwargs)\u001b[0m\n\u001b[1;32m   1220\u001b[0m         )\n\u001b[1;32m   1221\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mskip_gradients_aggregation\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mexperimental_aggregate_gradients\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1222\u001b[0;31m             \u001b[0mgrads_and_vars\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maggregate_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1223\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1224\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/optimizer.py\u001b[0m in \u001b[0;36maggregate_gradients\u001b[0;34m(self, grads_and_vars)\u001b[0m\n\u001b[1;32m   1182\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1183\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1184\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0moptimizer_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall_reduce_sum_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1185\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1186\u001b[0m     def apply_gradients(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/utils.py\u001b[0m in \u001b[0;36mall_reduce_sum_gradients\u001b[0;34m(grads_and_vars)\u001b[0m\n\u001b[1;32m     31\u001b[0m     \"\"\"\n\u001b[1;32m     32\u001b[0m     \u001b[0mgrads_and_vars\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m     \u001b[0mfiltered_grads_and_vars\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfilter_empty_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfiltered_grads_and_vars\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__internal__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdistribute\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrategy_supports_no_merge_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/utils.py\u001b[0m in \u001b[0;36mfilter_empty_gradients\u001b[0;34m(grads_and_vars)\u001b[0m\n\u001b[1;32m     75\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mfiltered\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m         \u001b[0mvariable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m     78\u001b[0m             \u001b[0;34mf\"No gradients provided for any variable: {variable}. \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m             \u001b[0;34mf\"Provided `grads_and_vars` is {grads_and_vars}.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: No gradients provided for any variable: (['dense_7/kernel:0', 'dense_7/bias:0', 'dense_8/kernel:0', 'dense_8/bias:0', 'dense_9/kernel:0', 'dense_9/bias:0', 'dense_10/kernel:0', 'dense_10/bias:0', 'dense_11/kernel:0', 'dense_11/bias:0', 'dense_12/kernel:0', 'dense_12/bias:0', 'dense_13/kernel:0', 'dense_13/bias:0'],). Provided `grads_and_vars` is ((None, <tf.Variable 'dense_7/kernel:0' shape=(2048, 512) dtype=float32, numpy=\narray([[-0.02552587,  0.01976389,  0.00809691, ...,  0.03406109,\n         0.02645925, -0.02544805],\n       [ 0.01299418, -0.0170031 , -0.03648469, ..., -0.01851693,\n         0.00290418,  0.02563923],\n       [ 0.04660729,  0.03434531, -0.03094377, ..., -0.04604105,\n         0.0275844 , -0.02141793],\n       ...,\n       [-0.04295367,  0.04068042, -0.04646092, ..., -0.00765682,\n        -0.0314377 ,  0.01016685],\n       [ 0.02378953, -0.03602906,  0.03337136, ..., -0.00417072,\n         0.02366   , -0.03997187],\n       [-0.0358343 , -0.03580118,  0.03382479, ..., -0.01303279,\n        -0.01497388, -0.04230733]], dtype=float32)>), (None, <tf.Variable 'dense_7/bias:0' shape=(512,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_8/kernel:0' shape=(512, 256) dtype=float32, numpy=\narray([[ 0.02086265,  0.02332706, -0.06051782, ..., -0.05598741,\n         0.01838972,  0.05659715],\n       [-0.01310954,  0.0113893 , -0.06242167, ..., -0.04633114,\n         0.0746144 , -0.06857862],\n       [ 0.0664496 ,  0.00569495,  0.03757099, ...,  0.04487247,\n        -0.04233567, -0.0761048 ],\n       ...,\n       [-0.00831854,  0.02527932,  0.0285708 , ..., -0.03707599,\n        -0.05552133,  0.08596311],\n       [-0.04944529,  0.00294258, -0.02537289, ..., -0.06527176,\n         0.01741371, -0.01357797],\n       [-0.06996644,  0.03349697,  0.00422893, ..., -0.0860838 ,\n        -0.08703879,  0.04375622]], dtype=float32)>), (None, <tf.Variable 'dense_8/bias:0' shape=(256,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0.], dtype=float32)>), (None, <tf.Variable 'dense_9/kernel:0' shape=(256, 128) dtype=float32, numpy=\narray([[ 0.12033081, -0.05373654,  0.02663392, ..., -0.08796406,\n        -0.11885619, -0.08449531],\n       [ 0.06886703,  0.00450161,  0.10414788, ...,  0.0632323 ,\n         0.0042277 ,  0.09126043],\n       [-0.07957706,  0.01847595, -0.09642223, ..., -0.02962992,\n         0.09307149,  0.02513412],\n       ...,\n       [ 0.12343422, -0.08318385,  0.02477929, ...,  0.05406696,\n         0.00162023,  0.06306708],\n       [ 0.04871216,  0.03561947, -0.02371559, ..., -0.08433878,\n         0.08569053, -0.00358224],\n       [ 0.04788455, -0.08304456,  0.01552042, ...,  0.09460297,\n         0.04286188, -0.03483871]], dtype=float32)>), (None, <tf.Variable 'dense_9/bias:0' shape=(128,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_10/kernel:0' shape=(128, 64) dtype=float32, numpy=\narray([[-0.0827126 , -0.00493185,  0.03162396, ..., -0.00914375,\n         0.11447881, -0.16280256],\n       [-0.05804452, -0.15653934,  0.1296056 , ...,  0.11437871,\n         0.06764215,  0.09279843],\n       [ 0.08211516, -0.14055943, -0.05816016, ..., -0.05678428,\n        -0.17089397, -0.11608734],\n       ...,\n       [-0.00032622,  0.11405404,  0.1460417 , ...,  0.13476403,\n        -0.06605616,  0.04090284],\n       [ 0.16159762,  0.11361893,  0.16373132, ..., -0.03763781,\n        -0.01080169,  0.05053259],\n       [ 0.13582702, -0.1401776 , -0.13075566, ...,  0.10292341,\n         0.10859536, -0.09068341]], dtype=float32)>), (None, <tf.Variable 'dense_10/bias:0' shape=(64,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_11/kernel:0' shape=(64, 128) dtype=float32, numpy=\narray([[ 1.19467840e-01,  1.63714275e-01,  6.36813194e-02, ...,\n        -1.76699430e-01,  1.61476806e-01, -1.03466168e-01],\n       [ 1.39251053e-02,  9.07806009e-02,  2.31519341e-02, ...,\n        -1.53709471e-01,  1.20959803e-01, -2.39265561e-02],\n       [ 1.68845057e-04,  1.20320454e-01, -3.08394432e-02, ...,\n         1.16242483e-01, -2.36216187e-03,  7.05252886e-02],\n       ...,\n       [-8.13993067e-02, -8.63014460e-02, -3.48975062e-02, ...,\n        -6.61958754e-03, -4.67094183e-02, -1.25973463e-01],\n       [ 1.40289202e-01,  6.79326206e-02, -8.96530896e-02, ...,\n        -6.73756525e-02, -1.54251695e-01,  1.30747691e-01],\n       [ 1.17905721e-01, -4.96918112e-02, -3.33941728e-02, ...,\n        -6.83720037e-02,  1.44255176e-01,  1.33289203e-01]], dtype=float32)>), (None, <tf.Variable 'dense_11/bias:0' shape=(128,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_12/kernel:0' shape=(128, 512) dtype=float32, numpy=\narray([[-0.07316715, -0.07420337,  0.07920349, ...,  0.04626146,\n         0.03033251, -0.01651298],\n       [-0.06455964, -0.02142083, -0.01956726, ..., -0.07023789,\n        -0.02418061, -0.09071268],\n       [ 0.05767132, -0.01610187, -0.05593782, ...,  0.03817029,\n         0.00636166,  0.07514334],\n       ...,\n       [ 0.08139689, -0.00149868,  0.03027511, ...,  0.03220664,\n         0.09020318, -0.00463685],\n       [ 0.05548677, -0.00556727, -0.05179569, ..., -0.01093215,\n         0.07664791, -0.07656709],\n       [-0.04654097, -0.01588332, -0.06051368, ...,  0.00709353,\n         0.04597248, -0.03890476]], dtype=float32)>), (None, <tf.Variable 'dense_12/bias:0' shape=(512,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_13/kernel:0' shape=(512, 512) dtype=float32, numpy=\narray([[-0.03890856, -0.06441525,  0.00910039, ...,  0.05507798,\n         0.0526515 ,  0.07296643],\n       [ 0.07517453, -0.06645506,  0.01443084, ..., -0.06985577,\n        -0.03545515,  0.03019156],\n       [-0.02395447,  0.00168879,  0.03911324, ..., -0.06466243,\n        -0.03843629,  0.06649198],\n       ...,\n       [ 0.0746079 , -0.0573164 , -0.05750555, ...,  0.02206637,\n        -0.02558087,  0.02995131],\n       [ 0.07125003, -0.0144668 ,  0.06967948, ...,  0.03576095,\n         0.00583076,  0.0618074 ],\n       [ 0.0687181 , -0.00644151,  0.01994875, ...,  0.0094413 ,\n        -0.05031223, -0.01693055]], dtype=float32)>), (None, <tf.Variable 'dense_13/bias:0' shape=(512,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0.], dtype=float32)>))."
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
      ],
      "metadata": {
        "id": "7_S6yoqdULHb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "ALTINCI DENEME (Burada da yukarıdaki modelin aynısını kullandım ve gradient'leri genetik algoritma kullanarak üretmeye çalıştım ki böylece rastgele modelin işine yaramayacak değil, loss fonksiyonun da yardımıyla doğru gradient'leri bulmaya çalıştım ama bu modelin çalışma zamanı çok uzun oldu o yüzden bundan da vazgeçtim.)"
      ],
      "metadata": {
        "id": "AKJOHu2-T6KB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tf.config.run_functions_eagerly(True)"
      ],
      "metadata": {
        "id": "Elv8nxBLUHzZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = Dense(256, activation='relu')(x)\n",
        "x = Dense(128, activation='relu')(x)\n",
        "x = Dense(64, activation='relu')(x)\n",
        "x = Dense(32, activation='relu')(x)\n",
        "x = Dense(64, activation='relu')(x)\n",
        "x = Dense(128, activation='relu')(x)\n",
        "x = Dense(256, activation='relu')(x)\n",
        "latent_vector = Dense(latent_dim, activation='linear')(x)"
      ],
      "metadata": {
        "id": "0sj09PCTUM4g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Model(inputs=base_model.input, outputs=latent_vector)"
      ],
      "metadata": {
        "id": "zrQozk1qUNk0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for layer in base_model.layers:\n",
        "    layer.trainable = False"
      ],
      "metadata": {
        "id": "rQ-QAab5UOE7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "optimizer = Adam(learning_rate=learning_rate)\n",
        "loss_fn = CategoricalCrossentropy()\n",
        "train_acc_metric = CategoricalAccuracy()\n",
        "val_acc_metric = CategoricalAccuracy()"
      ],
      "metadata": {
        "id": "LTpXQPdwUORC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from catboost import CatBoostClassifier, Pool, sum_models"
      ],
      "metadata": {
        "id": "_lLTPcXeUOhp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cls_model = CatBoostClassifier(\n",
        "    iterations=cls_epochs,\n",
        "    learning_rate=cls_learning_rate,\n",
        "    depth=cls_depth,\n",
        "    classes_count=train_generator.num_classes,\n",
        "    verbose=0\n",
        ")"
      ],
      "metadata": {
        "id": "UB2rjaW6UOsy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "first_time = True"
      ],
      "metadata": {
        "id": "6iPtrdzbUO16"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def train_model_on_subset(X, y):\n",
        "    global first_time\n",
        "\n",
        "    y_argmax = np.argmax(y, axis=1)\n",
        "\n",
        "    if first_time:\n",
        "      cls_model.fit(X, y_argmax)\n",
        "      first_time = False\n",
        "    else:\n",
        "      cls_model.fit(X, y_argmax, init_model=cls_model)\n",
        "    logits = cls_model.predict(X, prediction_type=\"Probability\", verbose=0)\n",
        "    loss_value = loss_fn(y, logits)\n",
        "    return logits, loss_value"
      ],
      "metadata": {
        "id": "pjJ_K2oEUPGx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def test_model_on_subset(X, y):\n",
        "    logits = cls_model.predict(X, prediction_type=\"Probability\", verbose=0)\n",
        "    loss_value = loss_fn(y, logits)\n",
        "    return logits, loss_value"
      ],
      "metadata": {
        "id": "jRtXVi62UPRo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def train_step(X, y):\n",
        "    with tf.GradientTape(persistent=True) as tape:\n",
        "        latent_vector = model(X, training=True)\n",
        "\n",
        "    grads = tape.gradient(tf.constant(1.245, dtype=tf.double), model.trainable_weights)\n",
        "\n",
        "    print(grads)\n",
        "    np_latent_vector = latent_vector.numpy()\n",
        "\n",
        "    logits, loss_value = train_model_on_subset(np_latent_vector, y)\n",
        "\n",
        "    print(loss_value)\n",
        "\n",
        "\n",
        "    optimizer.apply_gradients(zip(grads, model.trainable_weights))\n",
        "\n",
        "    train_acc_metric.update_state(y, logits)\n",
        "\n",
        "    return loss_value"
      ],
      "metadata": {
        "id": "hCR3rXFlUPhK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tf.function\n",
        "def test_step(X, y):\n",
        "    latent_vector = model(X, training=False)\n",
        "\n",
        "    np_latent_vector = latent_vector.numpy()\n",
        "\n",
        "    logits, loss_value = test_model_on_subset(np_latent_vector, y)\n",
        "\n",
        "    val_acc_metric.update_state(y, logits)\n",
        "\n",
        "    return loss_value"
      ],
      "metadata": {
        "id": "edqUfTGoUu35"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import gc\n",
        "gc.collect()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iDTArr8iUvCr",
        "outputId": "80fcdc00-891a-44c4-f401-db880edd96a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_loss_history = []\n",
        "train_accuracy_history = []\n",
        "val_loss_history = []\n",
        "val_accuracy_history = []"
      ],
      "metadata": {
        "id": "Q52R5T1XUvMR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for epoch in range(epochs):\n",
        "    print(f\"\\nStart of epoch {epoch}\")\n",
        "    start_time = time.time()\n",
        "\n",
        "    train_loss_value_for_epoch = None\n",
        "    val_loss_value_for_epoch = None\n",
        "    for step, (X_batch_train, y_batch_train) in enumerate(train_generator):\n",
        "        loss_value = train_step(X_batch_train, y_batch_train)\n",
        "\n",
        "        if step % 25 == 0:\n",
        "            print(\n",
        "                f\"Training loss (for 1 batch) at step {step}: {float(loss_value):.4f}\"\n",
        "            )\n",
        "            print(f\"Seen so far: {(step + 1) * batch_size} samples\")\n",
        "\n",
        "        if step + 1 >= len(train_generator):\n",
        "            print(\n",
        "                f\"Training loss (for 1 batch) at last step: {float(loss_value):.4f}\"\n",
        "            )\n",
        "            print(f\"Seen so far: {(step + 1) * batch_size} samples\")\n",
        "\n",
        "            train_generator.on_epoch_end()\n",
        "            train_loss_value_for_epoch = loss_value\n",
        "            break\n",
        "\n",
        "    train_loss_history.append(train_loss_value_for_epoch)\n",
        "\n",
        "    train_acc = train_acc_metric.result()\n",
        "    train_acc_metric.reset_state()\n",
        "    print(f\"Training acc over epoch: {float(train_acc):.4f}\")\n",
        "\n",
        "    train_accuracy_history.append(train_acc)\n",
        "\n",
        "    for step, (X_batch_val, y_batch_val) in enumerate(val_generator):\n",
        "        loss_value = test_step(X_batch_val, y_batch_val)\n",
        "\n",
        "        print(\n",
        "            f\"Validation loss (for 1 batch) at step {step}: {float(loss_value):.4f}\"\n",
        "        )\n",
        "        print(f\"Seen so far: {(step + 1) * batch_size} samples\")\n",
        "\n",
        "        if step + 1 >= len(val_generator):\n",
        "            val_generator.on_epoch_end()\n",
        "            val_loss_value_for_epoch = loss_value\n",
        "            break\n",
        "\n",
        "    val_loss_history.append(val_loss_value_for_epoch)\n",
        "\n",
        "    val_acc = val_acc_metric.result()\n",
        "    val_acc_metric.reset_state()\n",
        "    print(f\"Validation acc: {float(val_acc):.4f}\")\n",
        "    print(f\"Time taken: {time.time() - start_time:.2f}s\")\n",
        "\n",
        "    val_accuracy_history.append(val_acc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "UcMOqDqJUvUR",
        "outputId": "fe1322ec-10bf-4f21-a3a8-04a5d617f569"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Start of epoch 0\n",
            "[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\n",
            "tf.Tensor(1.142583981184272, shape=(), dtype=float64)\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "No gradients provided for any variable: (['dense/kernel:0', 'dense/bias:0', 'dense_1/kernel:0', 'dense_1/bias:0', 'dense_2/kernel:0', 'dense_2/bias:0', 'dense_3/kernel:0', 'dense_3/bias:0', 'dense_4/kernel:0', 'dense_4/bias:0', 'dense_5/kernel:0', 'dense_5/bias:0', 'dense_6/kernel:0', 'dense_6/bias:0', 'dense_7/kernel:0', 'dense_7/bias:0'],). Provided `grads_and_vars` is ((None, <tf.Variable 'dense/kernel:0' shape=(2048, 256) dtype=float32, numpy=\narray([[ 0.03704067, -0.04128283, -0.00222154, ...,  0.0268454 ,\n         0.00362879, -0.02648962],\n       [-0.01117669,  0.00675936, -0.02827097, ..., -0.02385554,\n         0.04811696, -0.03036369],\n       [ 0.00600742, -0.00497658, -0.03225531, ...,  0.03740581,\n        -0.00505031,  0.02738799],\n       ...,\n       [ 0.03091831,  0.03147932,  0.02971395, ..., -0.01843922,\n         0.04672048, -0.00996908],\n       [-0.03861097,  0.04138049, -0.03334405, ...,  0.03670251,\n         0.00513542, -0.01182823],\n       [ 0.0354064 ,  0.01039723,  0.00434591, ..., -0.04140163,\n         0.04629208, -0.00272114]], dtype=float32)>), (None, <tf.Variable 'dense/bias:0' shape=(256,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0.], dtype=float32)>), (None, <tf.Variable 'dense_1/kernel:0' shape=(256, 128) dtype=float32, numpy=\narray([[ 0.09868616,  0.02090028,  0.10834342, ..., -0.05316064,\n        -0.03729948, -0.06392297],\n       [-0.00454766,  0.03620464, -0.09945875, ..., -0.0899289 ,\n         0.04865757,  0.09898916],\n       [-0.04273513,  0.11422482, -0.04052129, ...,  0.10364142,\n         0.05802652, -0.00452921],\n       ...,\n       [-0.10334969,  0.02913392,  0.04204586, ..., -0.0582211 ,\n         0.11484385,  0.02415788],\n       [ 0.04212052,  0.07997745,  0.06725892, ..., -0.02055904,\n        -0.04740939,  0.00669   ],\n       [-0.1056239 ,  0.04824921,  0.10059837, ..., -0.0962429 ,\n         0.05294895,  0.06458238]], dtype=float32)>), (None, <tf.Variable 'dense_1/bias:0' shape=(128,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_2/kernel:0' shape=(128, 64) dtype=float32, numpy=\narray([[ 0.00182344, -0.15329373,  0.12935959, ..., -0.03159286,\n        -0.02116181, -0.05528406],\n       [-0.10751349,  0.01484428,  0.01262778, ...,  0.08583526,\n         0.06006001,  0.01823007],\n       [-0.08235418, -0.08617382, -0.05680451, ..., -0.11283267,\n         0.17633854, -0.12860082],\n       ...,\n       [-0.11862399,  0.00304562, -0.12810746, ...,  0.09977318,\n        -0.07013467,  0.03628439],\n       [ 0.09176932,  0.10514228,  0.08472474, ...,  0.15930568,\n         0.17320685, -0.09296414],\n       [-0.15046029, -0.07121127, -0.15013023, ...,  0.10848029,\n         0.03103015,  0.11432017]], dtype=float32)>), (None, <tf.Variable 'dense_2/bias:0' shape=(64,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_3/kernel:0' shape=(64, 32) dtype=float32, numpy=\narray([[-0.16858739,  0.08123368,  0.02419829, ..., -0.04314566,\n         0.1644674 ,  0.05769974],\n       [-0.07875836,  0.00739843,  0.00158936, ...,  0.16179079,\n         0.12700605,  0.16295666],\n       [-0.04448438,  0.2117536 , -0.2029388 , ...,  0.04877377,\n         0.05099404,  0.24949098],\n       ...,\n       [ 0.07989258, -0.13547415,  0.13308513, ...,  0.0433045 ,\n        -0.10334164,  0.22102058],\n       [-0.24810052, -0.17671216,  0.1463629 , ..., -0.05961651,\n        -0.21792138,  0.01246351],\n       [ 0.0080592 , -0.09515959,  0.08885378, ...,  0.24666125,\n         0.08073682, -0.00228834]], dtype=float32)>), (None, <tf.Variable 'dense_3/bias:0' shape=(32,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n      dtype=float32)>), (None, <tf.Variable 'dense_4/kernel:0' shape=(32, 64) dtype=float32, numpy=\narray([[-0.01006073,  0.24364138,  0.06946594, ...,  0.0745818 ,\n         0.14220446,  0.11743045],\n       [ 0.17362922, -0.22238576,  0.24665111, ..., -0.05739981,\n         0.04539376,  0.03842151],\n       [-0.15944964, -0.14057666, -0.21008837, ...,  0.06241959,\n         0.24666512,  0.07122797],\n       ...,\n       [ 0.17006898, -0.0602501 , -0.1807813 , ...,  0.09644538,\n        -0.15802228, -0.11734849],\n       [-0.00726622,  0.13953704, -0.12982297, ...,  0.00959629,\n         0.09450513,  0.06609756],\n       [ 0.00235665, -0.07981902, -0.01526612, ...,  0.1445871 ,\n        -0.04458249,  0.16219491]], dtype=float32)>), (None, <tf.Variable 'dense_4/bias:0' shape=(64,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_5/kernel:0' shape=(64, 128) dtype=float32, numpy=\narray([[-0.13263217, -0.09940056,  0.0736668 , ..., -0.1122655 ,\n         0.07391427,  0.03507359],\n       [ 0.0909947 , -0.17575169, -0.12459679, ..., -0.04499909,\n        -0.02523011, -0.16205366],\n       [-0.03676103, -0.16844717, -0.16527899, ...,  0.16029583,\n        -0.01469357,  0.15039293],\n       ...,\n       [-0.01408826,  0.102654  , -0.05021046, ...,  0.12953196,\n        -0.14141671,  0.11598344],\n       [-0.09540293, -0.1124244 , -0.03796348, ..., -0.01102258,\n         0.0061606 ,  0.01811214],\n       [-0.10587857,  0.07138985,  0.07572667, ..., -0.01615307,\n         0.14918493,  0.14042176]], dtype=float32)>), (None, <tf.Variable 'dense_5/bias:0' shape=(128,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_6/kernel:0' shape=(128, 256) dtype=float32, numpy=\narray([[ 0.01696736,  0.06762162,  0.00025019, ..., -0.11983863,\n         0.0346109 , -0.08311319],\n       [-0.09503567,  0.04800576,  0.03974798, ...,  0.01172611,\n        -0.05547553, -0.04247323],\n       [ 0.09165752, -0.09945148, -0.11690322, ..., -0.01182297,\n         0.09312171,  0.01238137],\n       ...,\n       [ 0.03302413, -0.02855989, -0.04005259, ..., -0.02109689,\n         0.09802872,  0.11190993],\n       [ 0.11569095,  0.06858546, -0.06209403, ...,  0.02437299,\n        -0.02716544, -0.09207129],\n       [-0.05515972,  0.00029987,  0.12299368, ...,  0.0844565 ,\n         0.04699221,  0.03940752]], dtype=float32)>), (None, <tf.Variable 'dense_6/bias:0' shape=(256,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0.], dtype=float32)>), (None, <tf.Variable 'dense_7/kernel:0' shape=(256, 512) dtype=float32, numpy=\narray([[ 0.05672441,  0.00612107,  0.05767391, ..., -0.001086  ,\n         0.02145968,  0.07873432],\n       [ 0.02131139,  0.06138682, -0.07519773, ..., -0.0249499 ,\n        -0.0808433 ,  0.07953013],\n       [ 0.01268833,  0.00984879,  0.05017435, ...,  0.01370302,\n        -0.06959224, -0.02382133],\n       ...,\n       [ 0.05367144,  0.08416612, -0.01806016, ...,  0.03115758,\n        -0.07844005,  0.01202892],\n       [-0.07751408, -0.08392219,  0.04429773, ..., -0.05037345,\n        -0.07807031, -0.03547011],\n       [-0.03553797, -0.02699626, -0.03334207, ..., -0.07117159,\n        -0.03829648, -0.0877365 ]], dtype=float32)>), (None, <tf.Variable 'dense_7/bias:0' shape=(512,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0.], dtype=float32)>)).",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-21-87669c519f31>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mval_loss_value_for_epoch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mX_batch_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_batch_train\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_generator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m         \u001b[0mloss_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_step\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_batch_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_batch_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mstep\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;36m25\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 153\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    154\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-17-d867b45b8986>\u001b[0m in \u001b[0;36mtrain_step\u001b[0;34m(X, y)\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m     \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrainable_weights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mtrain_acc_metric\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate_state\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogits\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/optimizer.py\u001b[0m in \u001b[0;36mapply_gradients\u001b[0;34m(self, grads_and_vars, name, skip_gradients_aggregation, **kwargs)\u001b[0m\n\u001b[1;32m   1220\u001b[0m         )\n\u001b[1;32m   1221\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mskip_gradients_aggregation\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mexperimental_aggregate_gradients\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1222\u001b[0;31m             \u001b[0mgrads_and_vars\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maggregate_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1223\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1224\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/optimizer.py\u001b[0m in \u001b[0;36maggregate_gradients\u001b[0;34m(self, grads_and_vars)\u001b[0m\n\u001b[1;32m   1182\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1183\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1184\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0moptimizer_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall_reduce_sum_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1185\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1186\u001b[0m     def apply_gradients(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/utils.py\u001b[0m in \u001b[0;36mall_reduce_sum_gradients\u001b[0;34m(grads_and_vars)\u001b[0m\n\u001b[1;32m     31\u001b[0m     \"\"\"\n\u001b[1;32m     32\u001b[0m     \u001b[0mgrads_and_vars\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m     \u001b[0mfiltered_grads_and_vars\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfilter_empty_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfiltered_grads_and_vars\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__internal__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdistribute\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrategy_supports_no_merge_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/optimizers/utils.py\u001b[0m in \u001b[0;36mfilter_empty_gradients\u001b[0;34m(grads_and_vars)\u001b[0m\n\u001b[1;32m     75\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mfiltered\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m         \u001b[0mvariable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgrads_and_vars\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m     78\u001b[0m             \u001b[0;34mf\"No gradients provided for any variable: {variable}. \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m             \u001b[0;34mf\"Provided `grads_and_vars` is {grads_and_vars}.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: No gradients provided for any variable: (['dense/kernel:0', 'dense/bias:0', 'dense_1/kernel:0', 'dense_1/bias:0', 'dense_2/kernel:0', 'dense_2/bias:0', 'dense_3/kernel:0', 'dense_3/bias:0', 'dense_4/kernel:0', 'dense_4/bias:0', 'dense_5/kernel:0', 'dense_5/bias:0', 'dense_6/kernel:0', 'dense_6/bias:0', 'dense_7/kernel:0', 'dense_7/bias:0'],). Provided `grads_and_vars` is ((None, <tf.Variable 'dense/kernel:0' shape=(2048, 256) dtype=float32, numpy=\narray([[ 0.03704067, -0.04128283, -0.00222154, ...,  0.0268454 ,\n         0.00362879, -0.02648962],\n       [-0.01117669,  0.00675936, -0.02827097, ..., -0.02385554,\n         0.04811696, -0.03036369],\n       [ 0.00600742, -0.00497658, -0.03225531, ...,  0.03740581,\n        -0.00505031,  0.02738799],\n       ...,\n       [ 0.03091831,  0.03147932,  0.02971395, ..., -0.01843922,\n         0.04672048, -0.00996908],\n       [-0.03861097,  0.04138049, -0.03334405, ...,  0.03670251,\n         0.00513542, -0.01182823],\n       [ 0.0354064 ,  0.01039723,  0.00434591, ..., -0.04140163,\n         0.04629208, -0.00272114]], dtype=float32)>), (None, <tf.Variable 'dense/bias:0' shape=(256,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0.], dtype=float32)>), (None, <tf.Variable 'dense_1/kernel:0' shape=(256, 128) dtype=float32, numpy=\narray([[ 0.09868616,  0.02090028,  0.10834342, ..., -0.05316064,\n        -0.03729948, -0.06392297],\n       [-0.00454766,  0.03620464, -0.09945875, ..., -0.0899289 ,\n         0.04865757,  0.09898916],\n       [-0.04273513,  0.11422482, -0.04052129, ...,  0.10364142,\n         0.05802652, -0.00452921],\n       ...,\n       [-0.10334969,  0.02913392,  0.04204586, ..., -0.0582211 ,\n         0.11484385,  0.02415788],\n       [ 0.04212052,  0.07997745,  0.06725892, ..., -0.02055904,\n        -0.04740939,  0.00669   ],\n       [-0.1056239 ,  0.04824921,  0.10059837, ..., -0.0962429 ,\n         0.05294895,  0.06458238]], dtype=float32)>), (None, <tf.Variable 'dense_1/bias:0' shape=(128,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_2/kernel:0' shape=(128, 64) dtype=float32, numpy=\narray([[ 0.00182344, -0.15329373,  0.12935959, ..., -0.03159286,\n        -0.02116181, -0.05528406],\n       [-0.10751349,  0.01484428,  0.01262778, ...,  0.08583526,\n         0.06006001,  0.01823007],\n       [-0.08235418, -0.08617382, -0.05680451, ..., -0.11283267,\n         0.17633854, -0.12860082],\n       ...,\n       [-0.11862399,  0.00304562, -0.12810746, ...,  0.09977318,\n        -0.07013467,  0.03628439],\n       [ 0.09176932,  0.10514228,  0.08472474, ...,  0.15930568,\n         0.17320685, -0.09296414],\n       [-0.15046029, -0.07121127, -0.15013023, ...,  0.10848029,\n         0.03103015,  0.11432017]], dtype=float32)>), (None, <tf.Variable 'dense_2/bias:0' shape=(64,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_3/kernel:0' shape=(64, 32) dtype=float32, numpy=\narray([[-0.16858739,  0.08123368,  0.02419829, ..., -0.04314566,\n         0.1644674 ,  0.05769974],\n       [-0.07875836,  0.00739843,  0.00158936, ...,  0.16179079,\n         0.12700605,  0.16295666],\n       [-0.04448438,  0.2117536 , -0.2029388 , ...,  0.04877377,\n         0.05099404,  0.24949098],\n       ...,\n       [ 0.07989258, -0.13547415,  0.13308513, ...,  0.0433045 ,\n        -0.10334164,  0.22102058],\n       [-0.24810052, -0.17671216,  0.1463629 , ..., -0.05961651,\n        -0.21792138,  0.01246351],\n       [ 0.0080592 , -0.09515959,  0.08885378, ...,  0.24666125,\n         0.08073682, -0.00228834]], dtype=float32)>), (None, <tf.Variable 'dense_3/bias:0' shape=(32,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n      dtype=float32)>), (None, <tf.Variable 'dense_4/kernel:0' shape=(32, 64) dtype=float32, numpy=\narray([[-0.01006073,  0.24364138,  0.06946594, ...,  0.0745818 ,\n         0.14220446,  0.11743045],\n       [ 0.17362922, -0.22238576,  0.24665111, ..., -0.05739981,\n         0.04539376,  0.03842151],\n       [-0.15944964, -0.14057666, -0.21008837, ...,  0.06241959,\n         0.24666512,  0.07122797],\n       ...,\n       [ 0.17006898, -0.0602501 , -0.1807813 , ...,  0.09644538,\n        -0.15802228, -0.11734849],\n       [-0.00726622,  0.13953704, -0.12982297, ...,  0.00959629,\n         0.09450513,  0.06609756],\n       [ 0.00235665, -0.07981902, -0.01526612, ...,  0.1445871 ,\n        -0.04458249,  0.16219491]], dtype=float32)>), (None, <tf.Variable 'dense_4/bias:0' shape=(64,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_5/kernel:0' shape=(64, 128) dtype=float32, numpy=\narray([[-0.13263217, -0.09940056,  0.0736668 , ..., -0.1122655 ,\n         0.07391427,  0.03507359],\n       [ 0.0909947 , -0.17575169, -0.12459679, ..., -0.04499909,\n        -0.02523011, -0.16205366],\n       [-0.03676103, -0.16844717, -0.16527899, ...,  0.16029583,\n        -0.01469357,  0.15039293],\n       ...,\n       [-0.01408826,  0.102654  , -0.05021046, ...,  0.12953196,\n        -0.14141671,  0.11598344],\n       [-0.09540293, -0.1124244 , -0.03796348, ..., -0.01102258,\n         0.0061606 ,  0.01811214],\n       [-0.10587857,  0.07138985,  0.07572667, ..., -0.01615307,\n         0.14918493,  0.14042176]], dtype=float32)>), (None, <tf.Variable 'dense_5/bias:0' shape=(128,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>), (None, <tf.Variable 'dense_6/kernel:0' shape=(128, 256) dtype=float32, numpy=\narray([[ 0.01696736,  0.06762162,  0.00025019, ..., -0.11983863,\n         0.0346109 , -0.08311319],\n       [-0.09503567,  0.04800576,  0.03974798, ...,  0.01172611,\n        -0.05547553, -0.04247323],\n       [ 0.09165752, -0.09945148, -0.11690322, ..., -0.01182297,\n         0.09312171,  0.01238137],\n       ...,\n       [ 0.03302413, -0.02855989, -0.04005259, ..., -0.02109689,\n         0.09802872,  0.11190993],\n       [ 0.11569095,  0.06858546, -0.06209403, ...,  0.02437299,\n        -0.02716544, -0.09207129],\n       [-0.05515972,  0.00029987,  0.12299368, ...,  0.0844565 ,\n         0.04699221,  0.03940752]], dtype=float32)>), (None, <tf.Variable 'dense_6/bias:0' shape=(256,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0.], dtype=float32)>), (None, <tf.Variable 'dense_7/kernel:0' shape=(256, 512) dtype=float32, numpy=\narray([[ 0.05672441,  0.00612107,  0.05767391, ..., -0.001086  ,\n         0.02145968,  0.07873432],\n       [ 0.02131139,  0.06138682, -0.07519773, ..., -0.0249499 ,\n        -0.0808433 ,  0.07953013],\n       [ 0.01268833,  0.00984879,  0.05017435, ...,  0.01370302,\n        -0.06959224, -0.02382133],\n       ...,\n       [ 0.05367144,  0.08416612, -0.01806016, ...,  0.03115758,\n        -0.07844005,  0.01202892],\n       [-0.07751408, -0.08392219,  0.04429773, ..., -0.05037345,\n        -0.07807031, -0.03547011],\n       [-0.03553797, -0.02699626, -0.03334207, ..., -0.07117159,\n        -0.03829648, -0.0877365 ]], dtype=float32)>), (None, <tf.Variable 'dense_7/bias:0' shape=(512,) dtype=float32, numpy=\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0.], dtype=float32)>))."
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
      ],
      "metadata": {
        "id": "tjqnKd_IZpZj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "YEDİNCİ DENEME - ÇOK UZUN BİR UĞRAŞ SONUCU KLASİK ÇÖZÜME DÖNÜŞ (Toplam 4 session yapıldı ve 26 farklı mimari ve hiperparametre denendi.)"
      ],
      "metadata": {
        "id": "Qdzyrs51ZpDY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras_tuner.tuners import Hyperband"
      ],
      "metadata": {
        "id": "um7j3N5cbajK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def build_model(hp):\n",
        "    for layer in base_model.layers:\n",
        "        layer.trainable = False\n",
        "\n",
        "    model = Sequential()\n",
        "    model.add(base_model)\n",
        "    model.add(GlobalAveragePooling2D())\n",
        "\n",
        "    for i in range(hp.Int(\"num_layers\", 1, 5)):\n",
        "        dense_units = hp.Choice('dense_units', values=[256, 512, 1024, 2048])\n",
        "        print(\"for \", i)\n",
        "        print(dense_units)\n",
        "\n",
        "        if hp.Boolean(\"regularizetion\"):\n",
        "            regularizetion_rate = hp.Choice('regularizetion_rate', values=[1e-3, 1e-4, 1e-5])\n",
        "            print(regularizetion_rate)\n",
        "            model.add(Dense(dense_units, activation=\"relu\", kernel_regularizer=regularizers.L1L2(l1=regularizetion_rate, l2=regularizetion_rate * 10)))\n",
        "        else:\n",
        "            model.add(Dense(dense_units, activation=\"relu\"))\n",
        "\n",
        "        if hp.Boolean(\"dropout\"):\n",
        "            dropout_rate = hp.Float('dropout_rate', min_value=0.0, max_value=0.5, step=0.1)\n",
        "            print(dropout_rate)\n",
        "            model.add(Dropout(dropout_rate))\n",
        "\n",
        "    model.add(Dense(train_generator.num_classes, activation=\"softmax\"))\n",
        "\n",
        "    learning_rate = hp.Choice('learning_rate', values=[1e-3, 1e-4])\n",
        "    optimizer = hp.Choice('optimizer', values=['sgd', 'adam'])\n",
        "\n",
        "    if optimizer == 'sgd':\n",
        "        optimizer = SGD(learning_rate=learning_rate, momentum=0.9, nesterov=True)\n",
        "    elif optimizer == 'adam':\n",
        "        optimizer = Adam(learning_rate=learning_rate)\n",
        "    else:\n",
        "        raise\n",
        "    print(optimizer)\n",
        "\n",
        "    model.compile(optimizer=optimizer,\n",
        "                  loss='categorical_crossentropy',\n",
        "                  metrics=['accuracy'])\n",
        "\n",
        "    return model"
      ],
      "metadata": {
        "id": "TWuZhlwfbVPO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tuner = Hyperband(build_model,\n",
        "                  objective='val_accuracy',\n",
        "                  max_epochs=10,\n",
        "                  factor=3,\n",
        "                  directory='models',\n",
        "                  project_name='deeplearningfinal')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vZjNzCvmZnh8",
        "outputId": "a434b5bf-e4a5-4d47-a63d-e2089983e4f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reloading Tuner from models/deeplearningfinal/tuner0.json\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "stop_early = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)"
      ],
      "metadata": {
        "id": "rEzsx0HHgyoI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tuner.search(train_generator, epochs=50, validation_data=val_generator, callbacks=[stop_early])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mKvukgeXg7TO",
        "outputId": "eb0e4afe-4ac7-4898-fe44-d54537246b10"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Trial 9 Complete [00h 56m 58s]\n",
            "val_accuracy: 0.48645833134651184\n",
            "\n",
            "Best val_accuracy So Far: 0.48645833134651184\n",
            "Total elapsed time: 06h 18m 28s\n",
            "\n",
            "Search: Running Trial #10\n",
            "\n",
            "Value             |Best Value So Far |Hyperparameter\n",
            "768               |512               |dense_units\n",
            "1                 |1                 |num_layers\n",
            "True              |False             |regularizetion\n",
            "False             |False             |dropout\n",
            "0.0001            |0.01              |learning_rate\n",
            "0                 |0.4               |dropout_rate\n",
            "0.0001            |0.0001            |regularizetion_rate\n",
            "sgd               |sgd               |optimizer\n",
            "2                 |2                 |tuner/epochs\n",
            "0                 |0                 |tuner/initial_epoch\n",
            "2                 |2                 |tuner/bracket\n",
            "0                 |0                 |tuner/round\n",
            "\n",
            "for  0\n",
            "768\n",
            "0.0001\n",
            "<keras.src.optimizers.sgd.SGD object at 0x78cfca1504c0>\n",
            "Epoch 1/2\n",
            " 88/108 [=======================>......] - ETA: 4:39 - loss: 7.3889 - accuracy: 0.1053"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "best_hps=tuner.get_best_hyperparameters(num_trials=1)[0]"
      ],
      "metadata": {
        "id": "LY0tioSKhb-o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "hypermodel = tuner.hypermodel.build(best_hps)\n",
        "history = hypermodel.fit(train_generator, epochs=50, validation_data=val_generator)\n",
        "\n",
        "val_acc_per_epoch = history.history['val_accuracy']\n",
        "best_epoch = val_acc_per_epoch.index(max(val_acc_per_epoch)) + 1\n",
        "print('Best epoch: %d' % (best_epoch,))"
      ],
      "metadata": {
        "id": "cA0XkcWKhSk9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "hhypermodel = tuner.hypermodel.build(best_hps)\n",
        "\n",
        "hhypermodel.fit(train_generator, epochs=50, validation_data=val_generator)"
      ],
      "metadata": {
        "id": "RVvPRn3thgGt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
      ],
      "metadata": {
        "id": "aBmsDy9GGXfG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "EN İYİ PARAMETRELERE GÖRE MODEL EĞİTİMİ (Yukarıdaki 1 deneme dışında hiçbiri çalışmadığı için klasik çözüme dönüş yaptım. En çok zamanı yukarıda harcadım(aralıklı olmak üzere yaklaşık 1.5 hafta), hiperparametre araştırması yaptıktan sonra bu kısma an itibariyle ayın 12'sinde başlıyorum.)"
      ],
      "metadata": {
        "id": "EWc77hlnGW0u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 25\n",
        "regularizetion_rate = 5e-4\n",
        "dropout_rate = 0.2\n",
        "learning_rate = 1e-3"
      ],
      "metadata": {
        "id": "YW46fqYiGKN_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "base_model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZgnH7fC--vgl",
        "outputId": "e2073a4b-e828-4dd8-f91e-f2f81d77fe9b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"resnet50v2\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                Output Shape                 Param #   Connected to                  \n",
            "==================================================================================================\n",
            " input_3 (InputLayer)        [(None, 224, 224, 3)]        0         []                            \n",
            "                                                                                                  \n",
            " conv1_pad (ZeroPadding2D)   (None, 230, 230, 3)          0         ['input_3[0][0]']             \n",
            "                                                                                                  \n",
            " conv1_conv (Conv2D)         (None, 112, 112, 64)         9472      ['conv1_pad[0][0]']           \n",
            "                                                                                                  \n",
            " pool1_pad (ZeroPadding2D)   (None, 114, 114, 64)         0         ['conv1_conv[0][0]']          \n",
            "                                                                                                  \n",
            " pool1_pool (MaxPooling2D)   (None, 56, 56, 64)           0         ['pool1_pad[0][0]']           \n",
            "                                                                                                  \n",
            " conv2_block1_preact_bn (Ba  (None, 56, 56, 64)           256       ['pool1_pool[0][0]']          \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2_block1_preact_relu (  (None, 56, 56, 64)           0         ['conv2_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv2_block1_1_conv (Conv2  (None, 56, 56, 64)           4096      ['conv2_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block1_1_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block1_1_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block1_2_pad (ZeroPa  (None, 58, 58, 64)           0         ['conv2_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv2_block1_2_conv (Conv2  (None, 56, 56, 64)           36864     ['conv2_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block1_2_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block1_2_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block1_0_conv (Conv2  (None, 56, 56, 256)          16640     ['conv2_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block1_3_conv (Conv2  (None, 56, 56, 256)          16640     ['conv2_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block1_out (Add)      (None, 56, 56, 256)          0         ['conv2_block1_0_conv[0][0]', \n",
            "                                                                     'conv2_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv2_block2_preact_bn (Ba  (None, 56, 56, 256)          1024      ['conv2_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2_block2_preact_relu (  (None, 56, 56, 256)          0         ['conv2_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv2_block2_1_conv (Conv2  (None, 56, 56, 64)           16384     ['conv2_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block2_1_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block2_1_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block2_2_pad (ZeroPa  (None, 58, 58, 64)           0         ['conv2_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv2_block2_2_conv (Conv2  (None, 56, 56, 64)           36864     ['conv2_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block2_2_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block2_2_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block2_3_conv (Conv2  (None, 56, 56, 256)          16640     ['conv2_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block2_out (Add)      (None, 56, 56, 256)          0         ['conv2_block1_out[0][0]',    \n",
            "                                                                     'conv2_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv2_block3_preact_bn (Ba  (None, 56, 56, 256)          1024      ['conv2_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2_block3_preact_relu (  (None, 56, 56, 256)          0         ['conv2_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv2_block3_1_conv (Conv2  (None, 56, 56, 64)           16384     ['conv2_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block3_1_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block3_1_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block3_2_pad (ZeroPa  (None, 58, 58, 64)           0         ['conv2_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv2_block3_2_conv (Conv2  (None, 28, 28, 64)           36864     ['conv2_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block3_2_bn (BatchNo  (None, 28, 28, 64)           256       ['conv2_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block3_2_relu (Activ  (None, 28, 28, 64)           0         ['conv2_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " max_pooling2d_6 (MaxPoolin  (None, 28, 28, 256)          0         ['conv2_block2_out[0][0]']    \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " conv2_block3_3_conv (Conv2  (None, 28, 28, 256)          16640     ['conv2_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block3_out (Add)      (None, 28, 28, 256)          0         ['max_pooling2d_6[0][0]',     \n",
            "                                                                     'conv2_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block1_preact_bn (Ba  (None, 28, 28, 256)          1024      ['conv2_block3_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block1_preact_relu (  (None, 28, 28, 256)          0         ['conv3_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block1_1_conv (Conv2  (None, 28, 28, 128)          32768     ['conv3_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block1_1_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block1_1_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block1_2_pad (ZeroPa  (None, 30, 30, 128)          0         ['conv3_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block1_2_conv (Conv2  (None, 28, 28, 128)          147456    ['conv3_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block1_2_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block1_2_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block1_0_conv (Conv2  (None, 28, 28, 512)          131584    ['conv3_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block1_3_conv (Conv2  (None, 28, 28, 512)          66048     ['conv3_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block1_out (Add)      (None, 28, 28, 512)          0         ['conv3_block1_0_conv[0][0]', \n",
            "                                                                     'conv3_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block2_preact_bn (Ba  (None, 28, 28, 512)          2048      ['conv3_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block2_preact_relu (  (None, 28, 28, 512)          0         ['conv3_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block2_1_conv (Conv2  (None, 28, 28, 128)          65536     ['conv3_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block2_1_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block2_1_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block2_2_pad (ZeroPa  (None, 30, 30, 128)          0         ['conv3_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block2_2_conv (Conv2  (None, 28, 28, 128)          147456    ['conv3_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block2_2_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block2_2_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block2_3_conv (Conv2  (None, 28, 28, 512)          66048     ['conv3_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block2_out (Add)      (None, 28, 28, 512)          0         ['conv3_block1_out[0][0]',    \n",
            "                                                                     'conv3_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block3_preact_bn (Ba  (None, 28, 28, 512)          2048      ['conv3_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block3_preact_relu (  (None, 28, 28, 512)          0         ['conv3_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block3_1_conv (Conv2  (None, 28, 28, 128)          65536     ['conv3_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block3_1_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block3_1_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block3_2_pad (ZeroPa  (None, 30, 30, 128)          0         ['conv3_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block3_2_conv (Conv2  (None, 28, 28, 128)          147456    ['conv3_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block3_2_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block3_2_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block3_3_conv (Conv2  (None, 28, 28, 512)          66048     ['conv3_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block3_out (Add)      (None, 28, 28, 512)          0         ['conv3_block2_out[0][0]',    \n",
            "                                                                     'conv3_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block4_preact_bn (Ba  (None, 28, 28, 512)          2048      ['conv3_block3_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block4_preact_relu (  (None, 28, 28, 512)          0         ['conv3_block4_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block4_1_conv (Conv2  (None, 28, 28, 128)          65536     ['conv3_block4_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block4_1_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block4_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block4_1_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block4_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block4_2_pad (ZeroPa  (None, 30, 30, 128)          0         ['conv3_block4_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block4_2_conv (Conv2  (None, 14, 14, 128)          147456    ['conv3_block4_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block4_2_bn (BatchNo  (None, 14, 14, 128)          512       ['conv3_block4_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block4_2_relu (Activ  (None, 14, 14, 128)          0         ['conv3_block4_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " max_pooling2d_7 (MaxPoolin  (None, 14, 14, 512)          0         ['conv3_block3_out[0][0]']    \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " conv3_block4_3_conv (Conv2  (None, 14, 14, 512)          66048     ['conv3_block4_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block4_out (Add)      (None, 14, 14, 512)          0         ['max_pooling2d_7[0][0]',     \n",
            "                                                                     'conv3_block4_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block1_preact_bn (Ba  (None, 14, 14, 512)          2048      ['conv3_block4_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block1_preact_relu (  (None, 14, 14, 512)          0         ['conv4_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block1_1_conv (Conv2  (None, 14, 14, 256)          131072    ['conv4_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block1_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block1_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block1_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block1_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block1_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block1_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block1_0_conv (Conv2  (None, 14, 14, 1024)         525312    ['conv4_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block1_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block1_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block1_0_conv[0][0]', \n",
            "                                                                     'conv4_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block2_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block2_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block2_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block2_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block2_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block2_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block2_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block2_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block2_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block2_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block2_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block1_out[0][0]',    \n",
            "                                                                     'conv4_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block3_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block3_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block3_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block3_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block3_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block3_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block3_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block3_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block3_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block3_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block3_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block2_out[0][0]',    \n",
            "                                                                     'conv4_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block4_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block3_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block4_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block4_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block4_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block4_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block4_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block4_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block4_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block4_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block4_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block4_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block4_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block4_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block4_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block4_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block4_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block4_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block4_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block4_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block4_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block3_out[0][0]',    \n",
            "                                                                     'conv4_block4_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block5_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block4_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block5_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block5_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block5_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block5_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block5_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block5_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block5_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block5_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block5_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block5_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block5_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block5_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block5_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block5_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block5_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block5_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block5_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block5_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block5_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block4_out[0][0]',    \n",
            "                                                                     'conv4_block5_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block6_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block5_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block6_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block6_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block6_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block6_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block6_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block6_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block6_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block6_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block6_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block6_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block6_2_conv (Conv2  (None, 7, 7, 256)            589824    ['conv4_block6_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block6_2_bn (BatchNo  (None, 7, 7, 256)            1024      ['conv4_block6_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block6_2_relu (Activ  (None, 7, 7, 256)            0         ['conv4_block6_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " max_pooling2d_8 (MaxPoolin  (None, 7, 7, 1024)           0         ['conv4_block5_out[0][0]']    \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " conv4_block6_3_conv (Conv2  (None, 7, 7, 1024)           263168    ['conv4_block6_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block6_out (Add)      (None, 7, 7, 1024)           0         ['max_pooling2d_8[0][0]',     \n",
            "                                                                     'conv4_block6_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv5_block1_preact_bn (Ba  (None, 7, 7, 1024)           4096      ['conv4_block6_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv5_block1_preact_relu (  (None, 7, 7, 1024)           0         ['conv5_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv5_block1_1_conv (Conv2  (None, 7, 7, 512)            524288    ['conv5_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block1_1_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block1_1_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block1_2_pad (ZeroPa  (None, 9, 9, 512)            0         ['conv5_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv5_block1_2_conv (Conv2  (None, 7, 7, 512)            2359296   ['conv5_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block1_2_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block1_2_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block1_0_conv (Conv2  (None, 7, 7, 2048)           2099200   ['conv5_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block1_3_conv (Conv2  (None, 7, 7, 2048)           1050624   ['conv5_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block1_out (Add)      (None, 7, 7, 2048)           0         ['conv5_block1_0_conv[0][0]', \n",
            "                                                                     'conv5_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv5_block2_preact_bn (Ba  (None, 7, 7, 2048)           8192      ['conv5_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv5_block2_preact_relu (  (None, 7, 7, 2048)           0         ['conv5_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv5_block2_1_conv (Conv2  (None, 7, 7, 512)            1048576   ['conv5_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block2_1_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block2_1_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block2_2_pad (ZeroPa  (None, 9, 9, 512)            0         ['conv5_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv5_block2_2_conv (Conv2  (None, 7, 7, 512)            2359296   ['conv5_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block2_2_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block2_2_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block2_3_conv (Conv2  (None, 7, 7, 2048)           1050624   ['conv5_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block2_out (Add)      (None, 7, 7, 2048)           0         ['conv5_block1_out[0][0]',    \n",
            "                                                                     'conv5_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv5_block3_preact_bn (Ba  (None, 7, 7, 2048)           8192      ['conv5_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv5_block3_preact_relu (  (None, 7, 7, 2048)           0         ['conv5_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv5_block3_1_conv (Conv2  (None, 7, 7, 512)            1048576   ['conv5_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block3_1_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block3_1_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block3_2_pad (ZeroPa  (None, 9, 9, 512)            0         ['conv5_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv5_block3_2_conv (Conv2  (None, 7, 7, 512)            2359296   ['conv5_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block3_2_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block3_2_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block3_3_conv (Conv2  (None, 7, 7, 2048)           1050624   ['conv5_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block3_out (Add)      (None, 7, 7, 2048)           0         ['conv5_block2_out[0][0]',    \n",
            "                                                                     'conv5_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " post_bn (BatchNormalizatio  (None, 7, 7, 2048)           8192      ['conv5_block3_out[0][0]']    \n",
            " n)                                                                                               \n",
            "                                                                                                  \n",
            " post_relu (Activation)      (None, 7, 7, 2048)           0         ['post_bn[0][0]']             \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 23564800 (89.89 MB)\n",
            "Trainable params: 0 (0.00 Byte)\n",
            "Non-trainable params: 23564800 (89.89 MB)\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for layer in base_model.layers:\n",
        "    layer.trainable = False"
      ],
      "metadata": {
        "id": "IRuD1cEKA8KP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = Dense(1024, kernel_regularizer=regularizers.L1L2(l1=regularizetion_rate, l2=regularizetion_rate * 10))(x)\n",
        "x = BatchNormalization()(x)\n",
        "x = Activation(\"relu\")(x)\n",
        "x = Dense(512, kernel_regularizer=regularizers.L1L2(l1=regularizetion_rate, l2=regularizetion_rate * 10))(x)\n",
        "x = BatchNormalization()(x)\n",
        "x = Activation(\"relu\")(x)\n",
        "x = Dense(256, kernel_regularizer=regularizers.L1L2(l1=regularizetion_rate, l2=regularizetion_rate * 10))(x)\n",
        "x = BatchNormalization()(x)\n",
        "x = Activation(\"relu\")(x)\n",
        "x = Dense(128, kernel_regularizer=regularizers.L1L2(l1=regularizetion_rate, l2=regularizetion_rate * 10))(x)\n",
        "x = BatchNormalization()(x)\n",
        "x = Activation(\"relu\")(x)\n",
        "x = Dense(128, kernel_regularizer=regularizers.L1L2(l1=regularizetion_rate, l2=regularizetion_rate * 10))(x)\n",
        "x = BatchNormalization()(x)\n",
        "x = Activation(\"relu\")(x)\n",
        "x = Dense(64, kernel_regularizer=regularizers.L1L2(l1=regularizetion_rate, l2=regularizetion_rate * 10))(x)\n",
        "x = BatchNormalization()(x)\n",
        "x = Activation(\"relu\")(x)\n",
        "x = Dense(64, kernel_regularizer=regularizers.L1L2(l1=regularizetion_rate, l2=regularizetion_rate * 10))(x)\n",
        "x = BatchNormalization()(x)\n",
        "x = Activation(\"relu\")(x)\n",
        "x = Dense(64, kernel_regularizer=regularizers.L1L2(l1=regularizetion_rate, l2=regularizetion_rate * 10))(x)\n",
        "x = BatchNormalization()(x)\n",
        "x = Activation(\"relu\")(x)\n",
        "x = Dense(32, kernel_regularizer=regularizers.L1L2(l1=regularizetion_rate, l2=regularizetion_rate * 10))(x)\n",
        "x = BatchNormalization()(x)\n",
        "x = Activation(\"relu\")(x)\n",
        "x = Dense(32, kernel_regularizer=regularizers.L1L2(l1=regularizetion_rate, l2=regularizetion_rate * 10))(x)\n",
        "x = BatchNormalization()(x)\n",
        "x = Activation(\"relu\")(x)\n",
        "x = Dense(32, kernel_regularizer=regularizers.L1L2(l1=regularizetion_rate, l2=regularizetion_rate * 10))(x)\n",
        "x = BatchNormalization()(x)\n",
        "x = Activation(\"relu\")(x)\n",
        "preds = Dense(train_generator.num_classes, activation=\"softmax\")(x)"
      ],
      "metadata": {
        "id": "ZZzxOQnQHFIP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Model(inputs=base_model.input, outputs=preds)\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GLMK9G6HA42C",
        "outputId": "f7fd7834-47db-4d8d-84f8-99b67d89ad74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_3\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                Output Shape                 Param #   Connected to                  \n",
            "==================================================================================================\n",
            " input_3 (InputLayer)        [(None, 224, 224, 3)]        0         []                            \n",
            "                                                                                                  \n",
            " conv1_pad (ZeroPadding2D)   (None, 230, 230, 3)          0         ['input_3[0][0]']             \n",
            "                                                                                                  \n",
            " conv1_conv (Conv2D)         (None, 112, 112, 64)         9472      ['conv1_pad[0][0]']           \n",
            "                                                                                                  \n",
            " pool1_pad (ZeroPadding2D)   (None, 114, 114, 64)         0         ['conv1_conv[0][0]']          \n",
            "                                                                                                  \n",
            " pool1_pool (MaxPooling2D)   (None, 56, 56, 64)           0         ['pool1_pad[0][0]']           \n",
            "                                                                                                  \n",
            " conv2_block1_preact_bn (Ba  (None, 56, 56, 64)           256       ['pool1_pool[0][0]']          \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2_block1_preact_relu (  (None, 56, 56, 64)           0         ['conv2_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv2_block1_1_conv (Conv2  (None, 56, 56, 64)           4096      ['conv2_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block1_1_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block1_1_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block1_2_pad (ZeroPa  (None, 58, 58, 64)           0         ['conv2_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv2_block1_2_conv (Conv2  (None, 56, 56, 64)           36864     ['conv2_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block1_2_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block1_2_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block1_0_conv (Conv2  (None, 56, 56, 256)          16640     ['conv2_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block1_3_conv (Conv2  (None, 56, 56, 256)          16640     ['conv2_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block1_out (Add)      (None, 56, 56, 256)          0         ['conv2_block1_0_conv[0][0]', \n",
            "                                                                     'conv2_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv2_block2_preact_bn (Ba  (None, 56, 56, 256)          1024      ['conv2_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2_block2_preact_relu (  (None, 56, 56, 256)          0         ['conv2_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv2_block2_1_conv (Conv2  (None, 56, 56, 64)           16384     ['conv2_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block2_1_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block2_1_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block2_2_pad (ZeroPa  (None, 58, 58, 64)           0         ['conv2_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv2_block2_2_conv (Conv2  (None, 56, 56, 64)           36864     ['conv2_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block2_2_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block2_2_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block2_3_conv (Conv2  (None, 56, 56, 256)          16640     ['conv2_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block2_out (Add)      (None, 56, 56, 256)          0         ['conv2_block1_out[0][0]',    \n",
            "                                                                     'conv2_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv2_block3_preact_bn (Ba  (None, 56, 56, 256)          1024      ['conv2_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2_block3_preact_relu (  (None, 56, 56, 256)          0         ['conv2_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv2_block3_1_conv (Conv2  (None, 56, 56, 64)           16384     ['conv2_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block3_1_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block3_1_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block3_2_pad (ZeroPa  (None, 58, 58, 64)           0         ['conv2_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv2_block3_2_conv (Conv2  (None, 28, 28, 64)           36864     ['conv2_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block3_2_bn (BatchNo  (None, 28, 28, 64)           256       ['conv2_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block3_2_relu (Activ  (None, 28, 28, 64)           0         ['conv2_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " max_pooling2d_6 (MaxPoolin  (None, 28, 28, 256)          0         ['conv2_block2_out[0][0]']    \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " conv2_block3_3_conv (Conv2  (None, 28, 28, 256)          16640     ['conv2_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block3_out (Add)      (None, 28, 28, 256)          0         ['max_pooling2d_6[0][0]',     \n",
            "                                                                     'conv2_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block1_preact_bn (Ba  (None, 28, 28, 256)          1024      ['conv2_block3_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block1_preact_relu (  (None, 28, 28, 256)          0         ['conv3_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block1_1_conv (Conv2  (None, 28, 28, 128)          32768     ['conv3_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block1_1_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block1_1_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block1_2_pad (ZeroPa  (None, 30, 30, 128)          0         ['conv3_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block1_2_conv (Conv2  (None, 28, 28, 128)          147456    ['conv3_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block1_2_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block1_2_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block1_0_conv (Conv2  (None, 28, 28, 512)          131584    ['conv3_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block1_3_conv (Conv2  (None, 28, 28, 512)          66048     ['conv3_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block1_out (Add)      (None, 28, 28, 512)          0         ['conv3_block1_0_conv[0][0]', \n",
            "                                                                     'conv3_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block2_preact_bn (Ba  (None, 28, 28, 512)          2048      ['conv3_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block2_preact_relu (  (None, 28, 28, 512)          0         ['conv3_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block2_1_conv (Conv2  (None, 28, 28, 128)          65536     ['conv3_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block2_1_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block2_1_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block2_2_pad (ZeroPa  (None, 30, 30, 128)          0         ['conv3_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block2_2_conv (Conv2  (None, 28, 28, 128)          147456    ['conv3_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block2_2_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block2_2_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block2_3_conv (Conv2  (None, 28, 28, 512)          66048     ['conv3_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block2_out (Add)      (None, 28, 28, 512)          0         ['conv3_block1_out[0][0]',    \n",
            "                                                                     'conv3_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block3_preact_bn (Ba  (None, 28, 28, 512)          2048      ['conv3_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block3_preact_relu (  (None, 28, 28, 512)          0         ['conv3_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block3_1_conv (Conv2  (None, 28, 28, 128)          65536     ['conv3_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block3_1_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block3_1_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block3_2_pad (ZeroPa  (None, 30, 30, 128)          0         ['conv3_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block3_2_conv (Conv2  (None, 28, 28, 128)          147456    ['conv3_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block3_2_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block3_2_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block3_3_conv (Conv2  (None, 28, 28, 512)          66048     ['conv3_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block3_out (Add)      (None, 28, 28, 512)          0         ['conv3_block2_out[0][0]',    \n",
            "                                                                     'conv3_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block4_preact_bn (Ba  (None, 28, 28, 512)          2048      ['conv3_block3_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block4_preact_relu (  (None, 28, 28, 512)          0         ['conv3_block4_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block4_1_conv (Conv2  (None, 28, 28, 128)          65536     ['conv3_block4_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block4_1_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block4_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block4_1_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block4_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block4_2_pad (ZeroPa  (None, 30, 30, 128)          0         ['conv3_block4_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block4_2_conv (Conv2  (None, 14, 14, 128)          147456    ['conv3_block4_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block4_2_bn (BatchNo  (None, 14, 14, 128)          512       ['conv3_block4_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block4_2_relu (Activ  (None, 14, 14, 128)          0         ['conv3_block4_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " max_pooling2d_7 (MaxPoolin  (None, 14, 14, 512)          0         ['conv3_block3_out[0][0]']    \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " conv3_block4_3_conv (Conv2  (None, 14, 14, 512)          66048     ['conv3_block4_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block4_out (Add)      (None, 14, 14, 512)          0         ['max_pooling2d_7[0][0]',     \n",
            "                                                                     'conv3_block4_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block1_preact_bn (Ba  (None, 14, 14, 512)          2048      ['conv3_block4_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block1_preact_relu (  (None, 14, 14, 512)          0         ['conv4_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block1_1_conv (Conv2  (None, 14, 14, 256)          131072    ['conv4_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block1_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block1_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block1_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block1_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block1_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block1_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block1_0_conv (Conv2  (None, 14, 14, 1024)         525312    ['conv4_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block1_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block1_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block1_0_conv[0][0]', \n",
            "                                                                     'conv4_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block2_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block2_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block2_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block2_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block2_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block2_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block2_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block2_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block2_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block2_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block2_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block1_out[0][0]',    \n",
            "                                                                     'conv4_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block3_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block3_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block3_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block3_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block3_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block3_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block3_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block3_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block3_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block3_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block3_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block2_out[0][0]',    \n",
            "                                                                     'conv4_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block4_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block3_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block4_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block4_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block4_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block4_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block4_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block4_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block4_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block4_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block4_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block4_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block4_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block4_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block4_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block4_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block4_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block4_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block4_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block4_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block4_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block3_out[0][0]',    \n",
            "                                                                     'conv4_block4_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block5_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block4_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block5_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block5_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block5_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block5_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block5_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block5_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block5_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block5_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block5_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block5_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block5_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block5_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block5_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block5_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block5_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block5_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block5_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block5_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block5_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block4_out[0][0]',    \n",
            "                                                                     'conv4_block5_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block6_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block5_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block6_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block6_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block6_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block6_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block6_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block6_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block6_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block6_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block6_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block6_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block6_2_conv (Conv2  (None, 7, 7, 256)            589824    ['conv4_block6_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block6_2_bn (BatchNo  (None, 7, 7, 256)            1024      ['conv4_block6_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block6_2_relu (Activ  (None, 7, 7, 256)            0         ['conv4_block6_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " max_pooling2d_8 (MaxPoolin  (None, 7, 7, 1024)           0         ['conv4_block5_out[0][0]']    \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " conv4_block6_3_conv (Conv2  (None, 7, 7, 1024)           263168    ['conv4_block6_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block6_out (Add)      (None, 7, 7, 1024)           0         ['max_pooling2d_8[0][0]',     \n",
            "                                                                     'conv4_block6_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv5_block1_preact_bn (Ba  (None, 7, 7, 1024)           4096      ['conv4_block6_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv5_block1_preact_relu (  (None, 7, 7, 1024)           0         ['conv5_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv5_block1_1_conv (Conv2  (None, 7, 7, 512)            524288    ['conv5_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block1_1_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block1_1_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block1_2_pad (ZeroPa  (None, 9, 9, 512)            0         ['conv5_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv5_block1_2_conv (Conv2  (None, 7, 7, 512)            2359296   ['conv5_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block1_2_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block1_2_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block1_0_conv (Conv2  (None, 7, 7, 2048)           2099200   ['conv5_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block1_3_conv (Conv2  (None, 7, 7, 2048)           1050624   ['conv5_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block1_out (Add)      (None, 7, 7, 2048)           0         ['conv5_block1_0_conv[0][0]', \n",
            "                                                                     'conv5_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv5_block2_preact_bn (Ba  (None, 7, 7, 2048)           8192      ['conv5_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv5_block2_preact_relu (  (None, 7, 7, 2048)           0         ['conv5_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv5_block2_1_conv (Conv2  (None, 7, 7, 512)            1048576   ['conv5_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block2_1_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block2_1_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block2_2_pad (ZeroPa  (None, 9, 9, 512)            0         ['conv5_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv5_block2_2_conv (Conv2  (None, 7, 7, 512)            2359296   ['conv5_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block2_2_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block2_2_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block2_3_conv (Conv2  (None, 7, 7, 2048)           1050624   ['conv5_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block2_out (Add)      (None, 7, 7, 2048)           0         ['conv5_block1_out[0][0]',    \n",
            "                                                                     'conv5_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv5_block3_preact_bn (Ba  (None, 7, 7, 2048)           8192      ['conv5_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv5_block3_preact_relu (  (None, 7, 7, 2048)           0         ['conv5_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv5_block3_1_conv (Conv2  (None, 7, 7, 512)            1048576   ['conv5_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block3_1_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block3_1_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block3_2_pad (ZeroPa  (None, 9, 9, 512)            0         ['conv5_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv5_block3_2_conv (Conv2  (None, 7, 7, 512)            2359296   ['conv5_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block3_2_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block3_2_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block3_3_conv (Conv2  (None, 7, 7, 2048)           1050624   ['conv5_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block3_out (Add)      (None, 7, 7, 2048)           0         ['conv5_block2_out[0][0]',    \n",
            "                                                                     'conv5_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " post_bn (BatchNormalizatio  (None, 7, 7, 2048)           8192      ['conv5_block3_out[0][0]']    \n",
            " n)                                                                                               \n",
            "                                                                                                  \n",
            " post_relu (Activation)      (None, 7, 7, 2048)           0         ['post_bn[0][0]']             \n",
            "                                                                                                  \n",
            " global_average_pooling2d_6  (None, 2048)                 0         ['post_relu[0][0]']           \n",
            "  (GlobalAveragePooling2D)                                                                        \n",
            "                                                                                                  \n",
            " dense_72 (Dense)            (None, 1024)                 2098176   ['global_average_pooling2d_6[0\n",
            "                                                                    ][0]']                        \n",
            "                                                                                                  \n",
            " batch_normalization_66 (Ba  (None, 1024)                 4096      ['dense_72[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_66 (Activation)  (None, 1024)                 0         ['batch_normalization_66[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_73 (Dense)            (None, 512)                  524800    ['activation_66[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_67 (Ba  (None, 512)                  2048      ['dense_73[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_67 (Activation)  (None, 512)                  0         ['batch_normalization_67[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_74 (Dense)            (None, 256)                  131328    ['activation_67[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_68 (Ba  (None, 256)                  1024      ['dense_74[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_68 (Activation)  (None, 256)                  0         ['batch_normalization_68[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_75 (Dense)            (None, 128)                  32896     ['activation_68[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_69 (Ba  (None, 128)                  512       ['dense_75[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_69 (Activation)  (None, 128)                  0         ['batch_normalization_69[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_76 (Dense)            (None, 128)                  16512     ['activation_69[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_70 (Ba  (None, 128)                  512       ['dense_76[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_70 (Activation)  (None, 128)                  0         ['batch_normalization_70[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_77 (Dense)            (None, 64)                   8256      ['activation_70[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_71 (Ba  (None, 64)                   256       ['dense_77[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_71 (Activation)  (None, 64)                   0         ['batch_normalization_71[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_78 (Dense)            (None, 64)                   4160      ['activation_71[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_72 (Ba  (None, 64)                   256       ['dense_78[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_72 (Activation)  (None, 64)                   0         ['batch_normalization_72[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_79 (Dense)            (None, 64)                   4160      ['activation_72[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_73 (Ba  (None, 64)                   256       ['dense_79[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_73 (Activation)  (None, 64)                   0         ['batch_normalization_73[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_80 (Dense)            (None, 32)                   2080      ['activation_73[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_74 (Ba  (None, 32)                   128       ['dense_80[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_74 (Activation)  (None, 32)                   0         ['batch_normalization_74[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_81 (Dense)            (None, 32)                   1056      ['activation_74[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_75 (Ba  (None, 32)                   128       ['dense_81[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_75 (Activation)  (None, 32)                   0         ['batch_normalization_75[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_82 (Dense)            (None, 32)                   1056      ['activation_75[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_76 (Ba  (None, 32)                   128       ['dense_82[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_76 (Activation)  (None, 32)                   0         ['batch_normalization_76[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_83 (Dense)            (None, 12)                   396       ['activation_76[0][0]']       \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 26399020 (100.70 MB)\n",
            "Trainable params: 2829548 (10.79 MB)\n",
            "Non-trainable params: 23569472 (89.91 MB)\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "checkpoint = ModelCheckpoint(\"Model(ResNet50).h5\", monitor='val_categorical_accuracy', verbose=1, mode=\"max\", save_best_only=True, save_weights_only=True)\n",
        "early = EarlyStopping(monitor='val_categorical_accuracy', min_delta=0, patience=3)\n",
        "reduce_lr = ReduceLROnPlateau(monitor='val_categorical_accuracy', factor=0.2,\n",
        "                              mode='max', cooldown=1, patience=2, min_lr=5e-6)"
      ],
      "metadata": {
        "id": "SDKL7MrZMSJV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "optimizer = Adam(learning_rate=learning_rate)"
      ],
      "metadata": {
        "id": "vDeI_GOqNr_T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(optimizer=optimizer,\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['categorical_accuracy'])"
      ],
      "metadata": {
        "id": "UGbHlUTN4K9y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(\n",
        "    train_generator,\n",
        "    validation_data=val_generator,\n",
        "    epochs=epochs,\n",
        "    callbacks=[checkpoint, early, reduce_lr],\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4iKwvGvxfiO3",
        "outputId": "fa871948-371a-409e-8b4d-53546bc77aa4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/25\n",
            "288/288 [==============================] - ETA: 0s - loss: 39.1014 - categorical_accuracy: 0.1344\n",
            "Epoch 1: val_categorical_accuracy improved from -inf to 0.08333, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 3348s 12s/step - loss: 39.1014 - categorical_accuracy: 0.1344 - val_loss: 14.8908 - val_categorical_accuracy: 0.0833 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 12.3578 - categorical_accuracy: 0.1665\n",
            "Epoch 2: val_categorical_accuracy improved from 0.08333 to 0.1040, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 204s 12s/step - loss: 12.3578 - categorical_accuracy: 0.1665 - val_loss: 8.2643 - val_categorical_accuracy: 0.1040 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 8.8704 - categorical_accuracy: 0.1819\n",
            "Epoch 3: val_categorical_accuracy improved from 0.1040 to 0.1359, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 202s 12s/step - loss: 8.8704 - categorical_accuracy: 0.1819 - val_loss: 7.0168 - val_categorical_accuracy: 0.1359 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 6.9003 - categorical_accuracy: 0.2267\n",
            "Epoch 4: val_categorical_accuracy improved from 0.1359 to 0.1730, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 187s 12s/step - loss: 6.9003 - categorical_accuracy: 0.2267 - val_loss: 6.5349 - val_categorical_accuracy: 0.1730 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 5.8442 - categorical_accuracy: 0.2749\n",
            "Epoch 5: val_categorical_accuracy improved from 0.1730 to 0.2238, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 186s 12s/step - loss: 5.8442 - categorical_accuracy: 0.2749 - val_loss: 5.5711 - val_categorical_accuracy: 0.2238 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 4.7299 - categorical_accuracy: 0.3223\n",
            "Epoch 6: val_categorical_accuracy improved from 0.2238 to 0.2753, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 194s 12s/step - loss: 4.7299 - categorical_accuracy: 0.3223 - val_loss: 4.7503 - val_categorical_accuracy: 0.2753 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 3.9449 - categorical_accuracy: 0.3675\n",
            "Epoch 7: val_categorical_accuracy improved from 0.2753 to 0.3196, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 181s 11s/step - loss: 3.9449 - categorical_accuracy: 0.3675 - val_loss: 4.0908 - val_categorical_accuracy: 0.3196 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 3.7094 - categorical_accuracy: 0.4240\n",
            "Epoch 8: val_categorical_accuracy improved from 0.3196 to 0.3765, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 182s 11s/step - loss: 3.7094 - categorical_accuracy: 0.4240 - val_loss: 3.8737 - val_categorical_accuracy: 0.3765 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 3.5097 - categorical_accuracy: 0.4886\n",
            "Epoch 9: val_categorical_accuracy improved from 0.3765 to 0.4112, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 170s 12s/step - loss: 3.5097 - categorical_accuracy: 0.4886 - val_loss: 3.6883 - val_categorical_accuracy: 0.4112 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 3.2894 - categorical_accuracy: 0.5582\n",
            "Epoch 10: val_categorical_accuracy improved from 0.4112 to 0.4541, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 193s 11s/step - loss: 3.2894 - categorical_accuracy: 0.5582 - val_loss: 3.4742 - val_categorical_accuracy: 0.4541 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 3.0697 - categorical_accuracy: 0.6078\n",
            "Epoch 11: val_categorical_accuracy improved from 0.4541 to 0.4954, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 173s 12s/step - loss: 3.0697 - categorical_accuracy: 0.6078 - val_loss: 3.3387 - val_categorical_accuracy: 0.4954 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 2.8405 - categorical_accuracy: 0.6707\n",
            "Epoch 12: val_categorical_accuracy improved from 0.4954 to 0.5572, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 183s 11s/step - loss: 2.8405 - categorical_accuracy: 0.6707 - val_loss: 3.1585 - val_categorical_accuracy: 0.5572 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 2.6377 - categorical_accuracy: 0.7400\n",
            "Epoch 13: val_categorical_accuracy improved from 0.5572 to 0.6060, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 200s 11s/step - loss: 2.6377 - categorical_accuracy: 0.7400 - val_loss: 2.9842 - val_categorical_accuracy: 0.6060 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 2.5646 - categorical_accuracy: 0.7458\n",
            "Epoch 14: val_categorical_accuracy improved from 0.6060 to 0.6108, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 173s 12s/step - loss: 2.5646 - categorical_accuracy: 0.7458 - val_loss: 2.9293 - val_categorical_accuracy: 0.6108 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 2.4825 - categorical_accuracy: 0.7516\n",
            "Epoch 15: val_categorical_accuracy improved from 0.6108 to 0.6152, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 203s 12s/step - loss: 2.4825 - categorical_accuracy: 0.7516 - val_loss: 2.8775 - val_categorical_accuracy: 0.6152 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 2.3829 - categorical_accuracy: 0.7567\n",
            "Epoch 16: val_categorical_accuracy improved from 0.6152 to 0.6200, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 172s 12s/step - loss: 2.3829 - categorical_accuracy: 0.7567 - val_loss: 2.8199 - val_categorical_accuracy: 0.6200 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 2.3068 - categorical_accuracy: 0.7622\n",
            "Epoch 17: val_categorical_accuracy improved from 0.6200 to 0.6246, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 206s 11s/step - loss: 2.3068 - categorical_accuracy: 0.7622 - val_loss: 2.7528 - val_categorical_accuracy: 0.6246 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 2.2327 - categorical_accuracy: 0.7679\n",
            "Epoch 18: val_categorical_accuracy improved from 0.6246 to 0.6287, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 206s 12s/step - loss: 2.2327 - categorical_accuracy: 0.7679 - val_loss: 2.6784 - val_categorical_accuracy: 0.6287 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 2.1561 - categorical_accuracy: 0.7734\n",
            "Epoch 19: val_categorical_accuracy improved from 0.6287 to 0.6328, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 201s 11s/step - loss: 2.1561 - categorical_accuracy: 0.7734 - val_loss: 2.6236 - val_categorical_accuracy: 0.6328 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 2.0705 - categorical_accuracy: 0.7789\n",
            "Epoch 20: val_categorical_accuracy improved from 0.6328 to 0.6383, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 184s 11s/step - loss: 2.0705 - categorical_accuracy: 0.7789 - val_loss: 2.5600 - val_categorical_accuracy: 0.6383 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.9930 - categorical_accuracy: 0.7845\n",
            "Epoch 21: val_categorical_accuracy improved from 0.6383 to 0.6428, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 184s 12s/step - loss: 1.9930 - categorical_accuracy: 0.7845 - val_loss: 2.4893 - val_categorical_accuracy: 0.6428 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.9000 - categorical_accuracy: 0.7902\n",
            "Epoch 22: val_categorical_accuracy improved from 0.6428 to 0.6484, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 180s 11s/step - loss: 1.9000 - categorical_accuracy: 0.7902 - val_loss: 2.4411 - val_categorical_accuracy: 0.6484 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.8213 - categorical_accuracy: 0.7955\n",
            "Epoch 23: val_categorical_accuracy improved from 0.6484 to 0.6528, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 183s 12s/step - loss: 1.8213 - categorical_accuracy: 0.7955 - val_loss: 2.3946 - val_categorical_accuracy: 0.6528 - lr: 0.001\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.7289 - categorical_accuracy: 0.8012\n",
            "Epoch 24: val_categorical_accuracy improved from 0.6528 to 0.6575, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 183s 12s/step - loss: 1.7289 - categorical_accuracy: 0.8012 - val_loss: 2.3298 - val_categorical_accuracy: 0.6575 - lr: 0.001\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'valid'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "dxDipUZxRj4P",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "52c79fb7-5f22-47cf-f267-b08fcb6e931d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'valid'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "-KAgUAGmRrVd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "7d62ab0c-4c38-4c0d-ac8b-e44ebd02efe9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "FINE TUNING"
      ],
      "metadata": {
        "id": "-JMHntDfroUx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 25\n",
        "regularizetion_rate = 5e-5\n",
        "dropout_rate = 0.2\n",
        "learning_rate = 5e-5"
      ],
      "metadata": {
        "id": "lhFwhui9r0Bh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "is_trainable = False\n",
        "\n",
        "for layer in base_model.layers:\n",
        "    layer.trainable = is_trainable\n",
        "\n",
        "    if layer.name == \"conv4_block6_out\":\n",
        "        is_trainable = True"
      ],
      "metadata": {
        "id": "95sj2lvfrnBi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I0iUGqsGr-Ip",
        "outputId": "3608de5a-0488-4520-f5b4-5473011e9a22"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_3\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                Output Shape                 Param #   Connected to                  \n",
            "==================================================================================================\n",
            " input_3 (InputLayer)        [(None, 224, 224, 3)]        0         []                            \n",
            "                                                                                                  \n",
            " conv1_pad (ZeroPadding2D)   (None, 230, 230, 3)          0         ['input_3[0][0]']             \n",
            "                                                                                                  \n",
            " conv1_conv (Conv2D)         (None, 112, 112, 64)         9472      ['conv1_pad[0][0]']           \n",
            "                                                                                                  \n",
            " pool1_pad (ZeroPadding2D)   (None, 114, 114, 64)         0         ['conv1_conv[0][0]']          \n",
            "                                                                                                  \n",
            " pool1_pool (MaxPooling2D)   (None, 56, 56, 64)           0         ['pool1_pad[0][0]']           \n",
            "                                                                                                  \n",
            " conv2_block1_preact_bn (Ba  (None, 56, 56, 64)           256       ['pool1_pool[0][0]']          \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2_block1_preact_relu (  (None, 56, 56, 64)           0         ['conv2_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv2_block1_1_conv (Conv2  (None, 56, 56, 64)           4096      ['conv2_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block1_1_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block1_1_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block1_2_pad (ZeroPa  (None, 58, 58, 64)           0         ['conv2_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv2_block1_2_conv (Conv2  (None, 56, 56, 64)           36864     ['conv2_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block1_2_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block1_2_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block1_0_conv (Conv2  (None, 56, 56, 256)          16640     ['conv2_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block1_3_conv (Conv2  (None, 56, 56, 256)          16640     ['conv2_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block1_out (Add)      (None, 56, 56, 256)          0         ['conv2_block1_0_conv[0][0]', \n",
            "                                                                     'conv2_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv2_block2_preact_bn (Ba  (None, 56, 56, 256)          1024      ['conv2_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2_block2_preact_relu (  (None, 56, 56, 256)          0         ['conv2_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv2_block2_1_conv (Conv2  (None, 56, 56, 64)           16384     ['conv2_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block2_1_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block2_1_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block2_2_pad (ZeroPa  (None, 58, 58, 64)           0         ['conv2_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv2_block2_2_conv (Conv2  (None, 56, 56, 64)           36864     ['conv2_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block2_2_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block2_2_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block2_3_conv (Conv2  (None, 56, 56, 256)          16640     ['conv2_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block2_out (Add)      (None, 56, 56, 256)          0         ['conv2_block1_out[0][0]',    \n",
            "                                                                     'conv2_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv2_block3_preact_bn (Ba  (None, 56, 56, 256)          1024      ['conv2_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2_block3_preact_relu (  (None, 56, 56, 256)          0         ['conv2_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv2_block3_1_conv (Conv2  (None, 56, 56, 64)           16384     ['conv2_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block3_1_bn (BatchNo  (None, 56, 56, 64)           256       ['conv2_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block3_1_relu (Activ  (None, 56, 56, 64)           0         ['conv2_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block3_2_pad (ZeroPa  (None, 58, 58, 64)           0         ['conv2_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv2_block3_2_conv (Conv2  (None, 28, 28, 64)           36864     ['conv2_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block3_2_bn (BatchNo  (None, 28, 28, 64)           256       ['conv2_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block3_2_relu (Activ  (None, 28, 28, 64)           0         ['conv2_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " max_pooling2d_6 (MaxPoolin  (None, 28, 28, 256)          0         ['conv2_block2_out[0][0]']    \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " conv2_block3_3_conv (Conv2  (None, 28, 28, 256)          16640     ['conv2_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block3_out (Add)      (None, 28, 28, 256)          0         ['max_pooling2d_6[0][0]',     \n",
            "                                                                     'conv2_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block1_preact_bn (Ba  (None, 28, 28, 256)          1024      ['conv2_block3_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block1_preact_relu (  (None, 28, 28, 256)          0         ['conv3_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block1_1_conv (Conv2  (None, 28, 28, 128)          32768     ['conv3_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block1_1_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block1_1_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block1_2_pad (ZeroPa  (None, 30, 30, 128)          0         ['conv3_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block1_2_conv (Conv2  (None, 28, 28, 128)          147456    ['conv3_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block1_2_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block1_2_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block1_0_conv (Conv2  (None, 28, 28, 512)          131584    ['conv3_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block1_3_conv (Conv2  (None, 28, 28, 512)          66048     ['conv3_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block1_out (Add)      (None, 28, 28, 512)          0         ['conv3_block1_0_conv[0][0]', \n",
            "                                                                     'conv3_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block2_preact_bn (Ba  (None, 28, 28, 512)          2048      ['conv3_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block2_preact_relu (  (None, 28, 28, 512)          0         ['conv3_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block2_1_conv (Conv2  (None, 28, 28, 128)          65536     ['conv3_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block2_1_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block2_1_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block2_2_pad (ZeroPa  (None, 30, 30, 128)          0         ['conv3_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block2_2_conv (Conv2  (None, 28, 28, 128)          147456    ['conv3_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block2_2_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block2_2_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block2_3_conv (Conv2  (None, 28, 28, 512)          66048     ['conv3_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block2_out (Add)      (None, 28, 28, 512)          0         ['conv3_block1_out[0][0]',    \n",
            "                                                                     'conv3_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block3_preact_bn (Ba  (None, 28, 28, 512)          2048      ['conv3_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block3_preact_relu (  (None, 28, 28, 512)          0         ['conv3_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block3_1_conv (Conv2  (None, 28, 28, 128)          65536     ['conv3_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block3_1_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block3_1_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block3_2_pad (ZeroPa  (None, 30, 30, 128)          0         ['conv3_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block3_2_conv (Conv2  (None, 28, 28, 128)          147456    ['conv3_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block3_2_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block3_2_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block3_3_conv (Conv2  (None, 28, 28, 512)          66048     ['conv3_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block3_out (Add)      (None, 28, 28, 512)          0         ['conv3_block2_out[0][0]',    \n",
            "                                                                     'conv3_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block4_preact_bn (Ba  (None, 28, 28, 512)          2048      ['conv3_block3_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block4_preact_relu (  (None, 28, 28, 512)          0         ['conv3_block4_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block4_1_conv (Conv2  (None, 28, 28, 128)          65536     ['conv3_block4_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block4_1_bn (BatchNo  (None, 28, 28, 128)          512       ['conv3_block4_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block4_1_relu (Activ  (None, 28, 28, 128)          0         ['conv3_block4_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block4_2_pad (ZeroPa  (None, 30, 30, 128)          0         ['conv3_block4_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block4_2_conv (Conv2  (None, 14, 14, 128)          147456    ['conv3_block4_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block4_2_bn (BatchNo  (None, 14, 14, 128)          512       ['conv3_block4_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block4_2_relu (Activ  (None, 14, 14, 128)          0         ['conv3_block4_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " max_pooling2d_7 (MaxPoolin  (None, 14, 14, 512)          0         ['conv3_block3_out[0][0]']    \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " conv3_block4_3_conv (Conv2  (None, 14, 14, 512)          66048     ['conv3_block4_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block4_out (Add)      (None, 14, 14, 512)          0         ['max_pooling2d_7[0][0]',     \n",
            "                                                                     'conv3_block4_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block1_preact_bn (Ba  (None, 14, 14, 512)          2048      ['conv3_block4_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block1_preact_relu (  (None, 14, 14, 512)          0         ['conv4_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block1_1_conv (Conv2  (None, 14, 14, 256)          131072    ['conv4_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block1_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block1_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block1_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block1_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block1_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block1_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block1_0_conv (Conv2  (None, 14, 14, 1024)         525312    ['conv4_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block1_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block1_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block1_0_conv[0][0]', \n",
            "                                                                     'conv4_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block2_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block2_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block2_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block2_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block2_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block2_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block2_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block2_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block2_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block2_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block2_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block1_out[0][0]',    \n",
            "                                                                     'conv4_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block3_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block3_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block3_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block3_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block3_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block3_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block3_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block3_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block3_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block3_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block3_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block2_out[0][0]',    \n",
            "                                                                     'conv4_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block4_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block3_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block4_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block4_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block4_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block4_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block4_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block4_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block4_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block4_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block4_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block4_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block4_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block4_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block4_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block4_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block4_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block4_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block4_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block4_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block4_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block3_out[0][0]',    \n",
            "                                                                     'conv4_block4_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block5_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block4_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block5_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block5_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block5_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block5_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block5_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block5_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block5_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block5_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block5_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block5_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block5_2_conv (Conv2  (None, 14, 14, 256)          589824    ['conv4_block5_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block5_2_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block5_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block5_2_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block5_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block5_3_conv (Conv2  (None, 14, 14, 1024)         263168    ['conv4_block5_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block5_out (Add)      (None, 14, 14, 1024)         0         ['conv4_block4_out[0][0]',    \n",
            "                                                                     'conv4_block5_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block6_preact_bn (Ba  (None, 14, 14, 1024)         4096      ['conv4_block5_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block6_preact_relu (  (None, 14, 14, 1024)         0         ['conv4_block6_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block6_1_conv (Conv2  (None, 14, 14, 256)          262144    ['conv4_block6_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block6_1_bn (BatchNo  (None, 14, 14, 256)          1024      ['conv4_block6_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block6_1_relu (Activ  (None, 14, 14, 256)          0         ['conv4_block6_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block6_2_pad (ZeroPa  (None, 16, 16, 256)          0         ['conv4_block6_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block6_2_conv (Conv2  (None, 7, 7, 256)            589824    ['conv4_block6_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block6_2_bn (BatchNo  (None, 7, 7, 256)            1024      ['conv4_block6_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block6_2_relu (Activ  (None, 7, 7, 256)            0         ['conv4_block6_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " max_pooling2d_8 (MaxPoolin  (None, 7, 7, 1024)           0         ['conv4_block5_out[0][0]']    \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " conv4_block6_3_conv (Conv2  (None, 7, 7, 1024)           263168    ['conv4_block6_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block6_out (Add)      (None, 7, 7, 1024)           0         ['max_pooling2d_8[0][0]',     \n",
            "                                                                     'conv4_block6_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv5_block1_preact_bn (Ba  (None, 7, 7, 1024)           4096      ['conv4_block6_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv5_block1_preact_relu (  (None, 7, 7, 1024)           0         ['conv5_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv5_block1_1_conv (Conv2  (None, 7, 7, 512)            524288    ['conv5_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block1_1_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block1_1_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block1_2_pad (ZeroPa  (None, 9, 9, 512)            0         ['conv5_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv5_block1_2_conv (Conv2  (None, 7, 7, 512)            2359296   ['conv5_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block1_2_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block1_2_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block1_0_conv (Conv2  (None, 7, 7, 2048)           2099200   ['conv5_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block1_3_conv (Conv2  (None, 7, 7, 2048)           1050624   ['conv5_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block1_out (Add)      (None, 7, 7, 2048)           0         ['conv5_block1_0_conv[0][0]', \n",
            "                                                                     'conv5_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv5_block2_preact_bn (Ba  (None, 7, 7, 2048)           8192      ['conv5_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv5_block2_preact_relu (  (None, 7, 7, 2048)           0         ['conv5_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv5_block2_1_conv (Conv2  (None, 7, 7, 512)            1048576   ['conv5_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block2_1_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block2_1_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block2_2_pad (ZeroPa  (None, 9, 9, 512)            0         ['conv5_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv5_block2_2_conv (Conv2  (None, 7, 7, 512)            2359296   ['conv5_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block2_2_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block2_2_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block2_3_conv (Conv2  (None, 7, 7, 2048)           1050624   ['conv5_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block2_out (Add)      (None, 7, 7, 2048)           0         ['conv5_block1_out[0][0]',    \n",
            "                                                                     'conv5_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv5_block3_preact_bn (Ba  (None, 7, 7, 2048)           8192      ['conv5_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv5_block3_preact_relu (  (None, 7, 7, 2048)           0         ['conv5_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv5_block3_1_conv (Conv2  (None, 7, 7, 512)            1048576   ['conv5_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block3_1_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block3_1_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block3_2_pad (ZeroPa  (None, 9, 9, 512)            0         ['conv5_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv5_block3_2_conv (Conv2  (None, 7, 7, 512)            2359296   ['conv5_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block3_2_bn (BatchNo  (None, 7, 7, 512)            2048      ['conv5_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block3_2_relu (Activ  (None, 7, 7, 512)            0         ['conv5_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block3_3_conv (Conv2  (None, 7, 7, 2048)           1050624   ['conv5_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block3_out (Add)      (None, 7, 7, 2048)           0         ['conv5_block2_out[0][0]',    \n",
            "                                                                     'conv5_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " post_bn (BatchNormalizatio  (None, 7, 7, 2048)           8192      ['conv5_block3_out[0][0]']    \n",
            " n)                                                                                               \n",
            "                                                                                                  \n",
            " post_relu (Activation)      (None, 7, 7, 2048)           0         ['post_bn[0][0]']             \n",
            "                                                                                                  \n",
            " global_average_pooling2d_6  (None, 2048)                 0         ['post_relu[0][0]']           \n",
            "  (GlobalAveragePooling2D)                                                                        \n",
            "                                                                                                  \n",
            " dense_72 (Dense)            (None, 1024)                 2098176   ['global_average_pooling2d_6[0\n",
            "                                                                    ][0]']                        \n",
            "                                                                                                  \n",
            " batch_normalization_66 (Ba  (None, 1024)                 4096      ['dense_72[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_66 (Activation)  (None, 1024)                 0         ['batch_normalization_66[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_73 (Dense)            (None, 512)                  524800    ['activation_66[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_67 (Ba  (None, 512)                  2048      ['dense_73[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_67 (Activation)  (None, 512)                  0         ['batch_normalization_67[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_74 (Dense)            (None, 256)                  131328    ['activation_67[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_68 (Ba  (None, 256)                  1024      ['dense_74[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_68 (Activation)  (None, 256)                  0         ['batch_normalization_68[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_75 (Dense)            (None, 128)                  32896     ['activation_68[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_69 (Ba  (None, 128)                  512       ['dense_75[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_69 (Activation)  (None, 128)                  0         ['batch_normalization_69[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_76 (Dense)            (None, 128)                  16512     ['activation_69[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_70 (Ba  (None, 128)                  512       ['dense_76[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_70 (Activation)  (None, 128)                  0         ['batch_normalization_70[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_77 (Dense)            (None, 64)                   8256      ['activation_70[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_71 (Ba  (None, 64)                   256       ['dense_77[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_71 (Activation)  (None, 64)                   0         ['batch_normalization_71[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_78 (Dense)            (None, 64)                   4160      ['activation_71[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_72 (Ba  (None, 64)                   256       ['dense_78[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_72 (Activation)  (None, 64)                   0         ['batch_normalization_72[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_79 (Dense)            (None, 64)                   4160      ['activation_72[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_73 (Ba  (None, 64)                   256       ['dense_79[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_73 (Activation)  (None, 64)                   0         ['batch_normalization_73[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_80 (Dense)            (None, 32)                   2080      ['activation_73[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_74 (Ba  (None, 32)                   128       ['dense_80[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_74 (Activation)  (None, 32)                   0         ['batch_normalization_74[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_81 (Dense)            (None, 32)                   1056      ['activation_74[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_75 (Ba  (None, 32)                   128       ['dense_81[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_75 (Activation)  (None, 32)                   0         ['batch_normalization_75[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_82 (Dense)            (None, 32)                   1056      ['activation_75[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_76 (Ba  (None, 32)                   128       ['dense_82[0][0]']            \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " activation_76 (Activation)  (None, 32)                   0         ['batch_normalization_76[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " dense_83 (Dense)            (None, 12)                   396       ['activation_76[0][0]']       \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 26399020 (100.70 MB)\n",
            "Trainable params: 17800428 (67.90 MB)\n",
            "Non-trainable params: 8598592 (32.80 MB)\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# %32 sini dondurdum sadece son conv blockları eğitiyorum"
      ],
      "metadata": {
        "id": "_u0bo-Uws5zA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "checkpoint = ModelCheckpoint(\"Model(ResNet50).h5\", monitor='val_categorical_accuracy', verbose=1, mode=\"max\", save_best_only=True, save_weights_only=True)\n",
        "early = EarlyStopping(monitor='val_categorical_accuracy', min_delta=0, patience=3)\n",
        "reduce_lr = ReduceLROnPlateau(monitor='val_categorical_accuracy', factor=0.2,\n",
        "                              mode='max', cooldown=1, patience=2, min_lr=5e-6)"
      ],
      "metadata": {
        "id": "oLCMBBTGsJdB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "optimizer = Adam(learning_rate=learning_rate)"
      ],
      "metadata": {
        "id": "WDxrDSl7sN5w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(optimizer=optimizer,\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['categorical_accuracy'])"
      ],
      "metadata": {
        "id": "m0CbAGmksQzp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(\n",
        "    train_generator,\n",
        "    validation_data=val_generator,\n",
        "    epochs=epochs,\n",
        "    callbacks=[checkpoint, early, reduce_lr],\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TaSY7sh3taFP",
        "outputId": "33c2d14d-c67d-46ec-dfc5-51a8d2748e35"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/25\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.7623 - categorical_accuracy: 0.8164\n",
            "Epoch 1: val_categorical_accuracy improved from -inf to 0.7432, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 501s 12s/step - loss: 1.7623 - categorical_accuracy: 0.8164 - val_loss: 1.9369 - val_categorical_accuracy: 0.7432 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.5963 - categorical_accuracy: 0.8296\n",
            "Epoch 2: val_categorical_accuracy improved from 0.7432 to 0.7601, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 387s 22s/step - loss: 1.5963 - categorical_accuracy: 0.8296 - val_loss: 1.7908 - val_categorical_accuracy: 0.7601 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.4849 - categorical_accuracy: 0.8428\n",
            "Epoch 3: val_categorical_accuracy improved from 0.7601 to 0.7756, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 369s 23s/step - loss: 1.4849 - categorical_accuracy: 0.8428 - val_loss: 1.6740 - val_categorical_accuracy: 0.7756 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.3218 - categorical_accuracy: 0.8606\n",
            "Epoch 4: val_categorical_accuracy improved from 0.7756 to 0.7925, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 388s 23s/step - loss: 1.3218 - categorical_accuracy: 0.8606 - val_loss: 1.5439 - val_categorical_accuracy: 0.7925 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.2062 - categorical_accuracy: 0.8758\n",
            "Epoch 5: val_categorical_accuracy improved from 0.7925 to 0.8081, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 364s 23s/step - loss: 1.2062 - categorical_accuracy: 0.8758 - val_loss: 1.3949 - val_categorical_accuracy: 0.8081 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.0515 - categorical_accuracy: 0.8935\n",
            "Epoch 6: val_categorical_accuracy improved from 0.8081 to 0.8229, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 382s 23s/step - loss: 1.0515 - categorical_accuracy: 0.8935 - val_loss: 1.2854 - val_categorical_accuracy: 0.8229 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.0451 - categorical_accuracy: 0.8941\n",
            "Epoch 7: val_categorical_accuracy improved from 0.8229 to 0.8236, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 373s 23s/step - loss: 1.0451 - categorical_accuracy: 0.8941 - val_loss: 1.2793 - val_categorical_accuracy: 0.8236 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.0395 - categorical_accuracy: 0.8945\n",
            "Epoch 8: val_categorical_accuracy improved from 0.8236 to 0.8240, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 362s 23s/step - loss: 1.0395 - categorical_accuracy: 0.8945 - val_loss: 1.2772 - val_categorical_accuracy: 0.8240 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.0337 - categorical_accuracy: 0.8948\n",
            "Epoch 9: val_categorical_accuracy improved from 0.8240 to 0.8247, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 370s 23s/step - loss: 1.0337 - categorical_accuracy: 0.8948 - val_loss: 1.2728 - val_categorical_accuracy: 0.8247 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.0278 - categorical_accuracy: 0.8955\n",
            "Epoch 10: val_categorical_accuracy improved from 0.8247 to 0.8251, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 397s 22s/step - loss: 1.0278 - categorical_accuracy: 0.8955 - val_loss: 1.2691 - val_categorical_accuracy: 0.8251 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.0222 - categorical_accuracy: 0.8959\n",
            "Epoch 11: val_categorical_accuracy improved from 0.8251 to 0.8253, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 360s 22s/step - loss: 1.0222 - categorical_accuracy: 0.8959 - val_loss: 1.2631 - val_categorical_accuracy: 0.8253 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.0180 - categorical_accuracy: 0.8967\n",
            "Epoch 12: val_categorical_accuracy improved from 0.8253 to 0.8261, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 367s 23s/step - loss: 1.0180 - categorical_accuracy: 0.8967 - val_loss: 1.2582 - val_categorical_accuracy: 0.8261 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.0110 - categorical_accuracy: 0.8973\n",
            "Epoch 13: val_categorical_accuracy improved from 0.8261 to 0.8267, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 396s 23s/step - loss: 1.0110 - categorical_accuracy: 0.8973 - val_loss: 1.2548 - val_categorical_accuracy: 0.8267 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 1.0063 - categorical_accuracy: 0.8976\n",
            "Epoch 14: val_categorical_accuracy improved from 0.8267 to 0.8270, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 370s 23s/step - loss: 1.0063 - categorical_accuracy: 0.8976 - val_loss: 1.2505 - val_categorical_accuracy: 0.8270 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 0.9999 - categorical_accuracy: 0.8980\n",
            "Epoch 15: val_categorical_accuracy improved from 0.8270 to 0.8277, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 380s 22s/step - loss: 0.9999 - categorical_accuracy: 0.8980 - val_loss: 1.2445 - val_categorical_accuracy: 0.8277 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 0.9930 - categorical_accuracy: 0.8987\n",
            "Epoch 16: val_categorical_accuracy improved from 0.8277 to 0.8283, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 397s 22s/step - loss: 0.9930 - categorical_accuracy: 0.8987 - val_loss: 1.2415 - val_categorical_accuracy: 0.8283 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 0.9874 - categorical_accuracy: 0.8994\n",
            "Epoch 17: val_categorical_accuracy improved from 0.8283 to 0.8288, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 392s 23s/step - loss: 0.9874 - categorical_accuracy: 0.8994 - val_loss: 1.2364 - val_categorical_accuracy: 0.8288 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 0.9829 - categorical_accuracy: 0.9000\n",
            "Epoch 18: val_categorical_accuracy improved from 0.8288 to 0.8296, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 365s 23s/step - loss: 0.9829 - categorical_accuracy: 0.9000 - val_loss: 1.2313 - val_categorical_accuracy: 0.8296 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 0.9778 - categorical_accuracy: 0.9007\n",
            "Epoch 19: val_categorical_accuracy improved from 0.8296 to 0.8298, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 379s 23s/step - loss: 0.9778 - categorical_accuracy: 0.9007 - val_loss: 1.2254 - val_categorical_accuracy: 0.8298 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 0.9717 - categorical_accuracy: 0.9012\n",
            "Epoch 20: val_categorical_accuracy improved from 0.8298 to 0.8301, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 373s 22s/step - loss: 0.9717 - categorical_accuracy: 0.9012 - val_loss: 1.2212 - val_categorical_accuracy: 0.8301 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 0.9666 - categorical_accuracy: 0.9019\n",
            "Epoch 21: val_categorical_accuracy improved from 0.8301 to 0.8304, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 368s 23s/step - loss: 0.9666 - categorical_accuracy: 0.9019 - val_loss: 1.2180 - val_categorical_accuracy: 0.8304 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 0.9615 - categorical_accuracy: 0.9024\n",
            "Epoch 22: val_categorical_accuracy improved from 0.8304 to 0.8308, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 384s 23s/step - loss: 0.9615 - categorical_accuracy: 0.9024 - val_loss: 1.2118 - val_categorical_accuracy: 0.8308 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 0.9563 - categorical_accuracy: 0.9030\n",
            "Epoch 23: val_categorical_accuracy improved from 0.8308 to 0.8317, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 392s 22s/step - loss: 0.9563 - categorical_accuracy: 0.9030 - val_loss: 1.2077 - val_categorical_accuracy: 0.8317 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 0.9508 - categorical_accuracy: 0.9036\n",
            "Epoch 24: val_categorical_accuracy improved from 0.8317 to 0.8321, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 396s 23s/step - loss: 0.9508 - categorical_accuracy: 0.9036 - val_loss: 1.2023 - val_categorical_accuracy: 0.8321 - lr: 0.00005\n",
            "288/288 [==============================] - ETA: 0s - loss: 0.9447 - categorical_accuracy: 0.9043\n",
            "Epoch 25: val_categorical_accuracy improved from 0.8321 to 0.8328, saving model to Model(ResNet50).h5\n",
            "288/288 [==============================] - 378s 23s/step - loss: 0.9447 - categorical_accuracy: 0.9043 - val_loss: 1.1982 - val_categorical_accuracy: 0.8328 - lr: 0.00005\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'valid'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "bfOR0CjU6aKh",
        "outputId": "30092092-bb3b-4183-a08e-976c46b43d7e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'valid'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "bnkxYCOs6fHR",
        "outputId": "1f12a190-82a1-43c8-ca1d-d0f78a4167d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.evaluate(test_generator)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1VjpwV3UDZ7Z",
        "outputId": "32245ce9-5ae4-4aee-9759-9fb6649b810c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "80/80 [==============================] - 154s 12s/step - loss: 1.1312 - categorical_accuracy: 0.8417\n",
            "[1.131276495167320, 0.841706732946855]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "FC katmanları eklendikten sonra eğitimden gelen model overfit'li bir halde geldiği için fine tune yaparken de overfit hali devam ediyor. Bunu train loss grafiğinin validation'dan çok aşağıda, accuracy grafiğinde de çok yukarıda oluşundan anlıyoruz. Bunu ekstradan dropout katmanı kullanarak çözebiliriz(aslında dropout ile de denemiştim hocam ama gidişatı daha kötü hissettirdi bana o yüzden en son model dropoutsuz oldu.). Belki tüm model unfreeze edilip tekrardan o en baştaki conv blocklarıyla beraber fine tune edilebilir ama ben çok bir etkisi olacağını düşünmüyorum."
      ],
      "metadata": {
        "id": "2-KuXvaV_63U"
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.4"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}